Compiled with problems:
×
ERROR in ./src/EmailQueueService.ts 3:0-25
Module not found: Error: Can't resolve 'bull' in 'P:\Jeff Stuff\temporal_edition\src'
ERROR in ./src/EmailService.ts 3:0-36
Module not found: Error: Can't resolve '@sendgrid/mail' in 'P:\Jeff Stuff\temporal_edition\src'
ERROR in ./src/index.tsx 12:33-36
export 'default' (imported as 'App') was not found in './app' (module has no exports)
ERROR in ./node_modules/@colors/colors/lib/colors.js 34:11-26
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\@colors\colors\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/@colors/colors/lib/colors.js 168:22-47
Module not found: Error: Can't resolve './maps/america' in 'P:\Jeff Stuff\temporal_edition\node_modules\@colors\colors\lib'
ERROR in ./node_modules/@colors/colors/lib/system/supports-colors.js 28:9-22
Module not found: Error: Can't resolve 'os' in 'P:\Jeff Stuff\temporal_edition\node_modules\@colors\colors\lib\system'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "os": require.resolve("os-browserify/browser") }'
	- install 'os-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "os": false }
ERROR in ./node_modules/@dabh/diagnostics/browser/development.js 28:16-44
Module not found: Error: Can't resolve '../logger/console' in 'P:\Jeff Stuff\temporal_edition\node_modules\@dabh\diagnostics\browser'
ERROR in ./node_modules/body-parser/lib/read.js 19:11-26
Module not found: Error: Can't resolve 'zlib' in 'P:\Jeff Stuff\temporal_edition\node_modules\body-parser\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "zlib": require.resolve("browserify-zlib") }'
	- install 'browserify-zlib'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "zlib": false }
ERROR in ./node_modules/body-parser/lib/types/urlencoded.js 218:12-34
Module not found: Error: Can't resolve 'querystring' in 'P:\Jeff Stuff\temporal_edition\node_modules\body-parser\lib\types'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "querystring": require.resolve("querystring-es3") }'
	- install 'querystring-es3'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "querystring": false }
ERROR in ./node_modules/colorspace/index.js 3:12-28
Module not found: Error: Can't resolve 'color' in 'P:\Jeff Stuff\temporal_edition\node_modules\colorspace'
ERROR in ./node_modules/colorspace/index.js 4:8-27
Module not found: Error: Can't resolve 'text-hex' in 'P:\Jeff Stuff\temporal_edition\node_modules\colorspace'
ERROR in ./node_modules/content-disposition/index.js 21:15-39
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\content-disposition'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/cookie-signature/index.js 5:13-30
Module not found: Error: Can't resolve 'crypto' in 'P:\Jeff Stuff\temporal_edition\node_modules\cookie-signature'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "crypto": require.resolve("crypto-browserify") }'
	- install 'crypto-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "crypto": false }
ERROR in ./node_modules/destroy/index.js 15:17-41
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\destroy'
ERROR in ./node_modules/destroy/index.js 16:13-30
Module not found: Error: Can't resolve 'stream' in 'P:\Jeff Stuff\temporal_edition\node_modules\destroy'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "stream": require.resolve("stream-browserify") }'
	- install 'stream-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "stream": false }
ERROR in ./node_modules/destroy/index.js 17:11-26
Module not found: Error: Can't resolve 'zlib' in 'P:\Jeff Stuff\temporal_edition\node_modules\destroy'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "zlib": require.resolve("browserify-zlib") }'
	- install 'browserify-zlib'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "zlib": false }
ERROR in ./node_modules/dotenv/lib/main.js 2:13-28
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\dotenv\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/dotenv/lib/main.js 3:11-24
Module not found: Error: Can't resolve 'os' in 'P:\Jeff Stuff\temporal_edition\node_modules\dotenv\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "os": require.resolve("os-browserify/browser") }'
	- install 'os-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "os": false }
ERROR in ./node_modules/dotenv/lib/main.js 4:15-32
Module not found: Error: Can't resolve 'crypto' in 'P:\Jeff Stuff\temporal_edition\node_modules\dotenv\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "crypto": require.resolve("crypto-browserify") }'
	- install 'crypto-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "crypto": false }
ERROR in ./node_modules/etag/index.js 20:13-30
Module not found: Error: Can't resolve 'crypto' in 'P:\Jeff Stuff\temporal_edition\node_modules\etag'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "crypto": require.resolve("crypto-browserify") }'
	- install 'crypto-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "crypto": false }
ERROR in ./node_modules/etag/index.js 21:12-31
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\etag'
ERROR in ./node_modules/express/lib/application.js 22:11-26
Module not found: Error: Can't resolve 'http' in 'P:\Jeff Stuff\temporal_edition\node_modules\express\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "http": require.resolve("stream-http") }'
	- install 'stream-http'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "http": false }
ERROR in ./node_modules/express/lib/application.js 29:14-37
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\express\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/express/lib/request.js 17:11-30
Module not found: Error: Can't resolve 'net' in 'P:\Jeff Stuff\temporal_edition\node_modules\express\lib'
ERROR in ./node_modules/express/lib/request.js 19:11-26
Module not found: Error: Can't resolve 'http' in 'P:\Jeff Stuff\temporal_edition\node_modules\express\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "http": require.resolve("stream-http") }'
	- install 'stream-http'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "http": false }
ERROR in ./node_modules/express/lib/response.js 20:11-26
Module not found: Error: Can't resolve 'http' in 'P:\Jeff Stuff\temporal_edition\node_modules\express\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "http": require.resolve("stream-http") }'
	- install 'stream-http'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "http": false }
ERROR in ./node_modules/express/lib/response.js 23:11-26
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\express\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/express/lib/utils.js 23:18-40
Module not found: Error: Can't resolve 'querystring' in 'P:\Jeff Stuff\temporal_edition\node_modules\express\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "querystring": require.resolve("querystring-es3") }'
	- install 'querystring-es3'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "querystring": false }
ERROR in ./node_modules/express/lib/view.js 16:11-26
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\express\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/express/lib/view.js 17:9-22
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\express\lib'
ERROR in ./node_modules/logform/dist/json.js 6:16-48
Module not found: Error: Can't resolve 'safe-stable-stringify' in 'P:\Jeff Stuff\temporal_edition\node_modules\logform\dist'
ERROR in ./node_modules/logform/dist/logstash.js 6:20-52
Module not found: Error: Can't resolve 'safe-stable-stringify' in 'P:\Jeff Stuff\temporal_edition\node_modules\logform\dist'
ERROR in ./node_modules/logform/dist/pretty-print.js 3:14-37
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\logform\dist'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/logform/dist/simple.js 7:20-52
Module not found: Error: Can't resolve 'safe-stable-stringify' in 'P:\Jeff Stuff\temporal_edition\node_modules\logform\dist'
ERROR in ./node_modules/logform/dist/splat.js 64:11-26
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\logform\dist'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/logform/json.js 7:18-50
Module not found: Error: Can't resolve 'safe-stable-stringify' in 'P:\Jeff Stuff\temporal_edition\node_modules\logform'
ERROR in ./node_modules/mime-types/index.js 15:14-37
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\mime-types'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/parseurl/index.js 14:10-24
Module not found: Error: Can't resolve 'url' in 'P:\Jeff Stuff\temporal_edition\node_modules\parseurl'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "url": require.resolve("url/") }'
	- install 'url'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "url": false }
ERROR in ./node_modules/prom-client/lib/cluster.js 20:15-33
Module not found: Error: Can't resolve 'cluster' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'
Did you mean './cluster'?
Requests that should resolve in the current directory need to start with './'.
Requests that start with a name are treated as module requests and resolve within module directories (node_modules, P:\Jeff Stuff\temporal_edition\node_modules).
If changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.
ERROR in ./node_modules/prom-client/lib/counter.js 6:13-28
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'
Did you mean './util'?
Requests that should resolve in the current directory need to start with './'.
Requests that start with a name are treated as module requests and resolve within module directories (node_modules, P:\Jeff Stuff\temporal_edition\node_modules).
If changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/prom-client/lib/counter.js 20:17-38
Module not found: Error: Can't resolve './exemplar' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'
ERROR in ./node_modules/prom-client/lib/defaultMetrics.js 13:21-54
Module not found: Error: Can't resolve './metrics/eventLoopLag' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'
ERROR in ./node_modules/prom-client/lib/gauge.js 6:13-28
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'
Did you mean './util'?
Requests that should resolve in the current directory need to start with './'.
Requests that start with a name are treated as module requests and resolve within module directories (node_modules, P:\Jeff Stuff\temporal_edition\node_modules).
If changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/prom-client/lib/histogram.js 6:13-28
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'
Did you mean './util'?
Requests that should resolve in the current directory need to start with './'.
Requests that start with a name are treated as module requests and resolve within module directories (node_modules, P:\Jeff Stuff\temporal_edition\node_modules).
If changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/prom-client/lib/histogram.js 20:17-38
Module not found: Error: Can't resolve './exemplar' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'
ERROR in ./node_modules/prom-client/lib/metrics/heapSpacesSizeAndUsed.js 4:11-24
Module not found: Error: Can't resolve 'v8' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib\metrics'
ERROR in ./node_modules/prom-client/lib/metrics/osMemoryHeapLinux.js 4:11-24
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib\metrics'
ERROR in ./node_modules/prom-client/lib/metrics/processMaxFileDescriptors.js 4:11-24
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib\metrics'
ERROR in ./node_modules/prom-client/lib/metrics/processOpenFileDescriptors.js 4:11-24
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib\metrics'
ERROR in ./node_modules/prom-client/lib/metrics/processOpenFileDescriptors.js 5:16-34
Module not found: Error: Can't resolve 'process' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib\metrics'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "process": require.resolve("process/browser") }'
	- install 'process'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "process": false }
ERROR in ./node_modules/prom-client/lib/pushgateway.js 3:12-26
Module not found: Error: Can't resolve 'url' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "url": require.resolve("url/") }'
	- install 'url'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "url": false }
ERROR in ./node_modules/prom-client/lib/pushgateway.js 4:13-28
Module not found: Error: Can't resolve 'http' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "http": require.resolve("stream-http") }'
	- install 'stream-http'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "http": false }
ERROR in ./node_modules/prom-client/lib/pushgateway.js 5:14-30
Module not found: Error: Can't resolve 'https' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "https": require.resolve("https-browserify") }'
	- install 'https-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "https": false }
ERROR in ./node_modules/prom-client/lib/pushgateway.js 8:4-19
Module not found: Error: Can't resolve 'zlib' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "zlib": require.resolve("browserify-zlib") }'
	- install 'browserify-zlib'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "zlib": false }
ERROR in ./node_modules/prom-client/lib/summary.js 6:13-28
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'
Did you mean './util'?
Requests that should resolve in the current directory need to start with './'.
Requests that start with a name are treated as module requests and resolve within module directories (node_modules, P:\Jeff Stuff\temporal_edition\node_modules).
If changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/prom-client/lib/validation.js 3:13-28
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\prom-client\lib'
Did you mean './util'?
Requests that should resolve in the current directory need to start with './'.
Requests that start with a name are treated as module requests and resolve within module directories (node_modules, P:\Jeff Stuff\temporal_edition\node_modules).
If changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/readable-stream/lib/_stream_readable.js 43:13-37
Module not found: Error: Can't resolve 'buffer' in 'P:\Jeff Stuff\temporal_edition\node_modules\readable-stream\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "buffer": require.resolve("buffer/") }'
	- install 'buffer'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "buffer": false }
ERROR in ./node_modules/readable-stream/lib/_stream_writable.js 66:13-37
Module not found: Error: Can't resolve 'buffer' in 'P:\Jeff Stuff\temporal_edition\node_modules\readable-stream\lib'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "buffer": require.resolve("buffer/") }'
	- install 'buffer'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "buffer": false }
ERROR in ./node_modules/readable-stream/lib/internal/streams/buffer_list.js 74:15-32
Module not found: Error: Can't resolve 'buffer' in 'P:\Jeff Stuff\temporal_edition\node_modules\readable-stream\lib\internal\streams'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "buffer": require.resolve("buffer/") }'
	- install 'buffer'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "buffer": false }
ERROR in ./node_modules/safe-buffer/index.js 3:13-30
Module not found: Error: Can't resolve 'buffer' in 'P:\Jeff Stuff\temporal_edition\node_modules\safe-buffer'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "buffer": require.resolve("buffer/") }'
	- install 'buffer'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "buffer": false }
ERROR in ./node_modules/safer-buffer/safer.js 5:13-30
Module not found: Error: Can't resolve 'buffer' in 'P:\Jeff Stuff\temporal_edition\node_modules\safer-buffer'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "buffer": require.resolve("buffer/") }'
	- install 'buffer'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "buffer": false }
ERROR in ./node_modules/send/index.js 22:9-22
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\send'
ERROR in ./node_modules/send/index.js 27:11-26
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\send'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/send/index.js 29:13-30
Module not found: Error: Can't resolve 'stream' in 'P:\Jeff Stuff\temporal_edition\node_modules\send'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "stream": require.resolve("stream-browserify") }'
	- install 'stream-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "stream": false }
ERROR in ./node_modules/send/index.js 30:11-26
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\send'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/send/node_modules/mime/mime.js 1:11-26
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\send\node_modules\mime'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/send/node_modules/mime/mime.js 2:9-22
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\send\node_modules\mime'
ERROR in ./node_modules/serve-static/index.js 18:14-37
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\serve-static'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/serve-static/index.js 20:10-24
Module not found: Error: Can't resolve 'url' in 'P:\Jeff Stuff\temporal_edition\node_modules\serve-static'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "url": require.resolve("url/") }'
	- install 'url'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "url": false }
ERROR in ./node_modules/triple-beam/config/index.js 15:9-25
Module not found: Error: Can't resolve './cli' in 'P:\Jeff Stuff\temporal_edition\node_modules\triple-beam\config'
ERROR in ./node_modules/winston-transport/dist/legacy.js 3:11-26
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston-transport\dist'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/winston-transport/dist/modern.js 3:11-26
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston-transport\dist'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/winston-transport/legacy.js 3:13-28
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston-transport'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/winston-transport/modern.js 3:13-28
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston-transport'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/winston/dist/winston/common.js 10:15-30
Module not found: Error: Can't resolve 'util' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }
ERROR in ./node_modules/winston/dist/winston/exception-handler.js 47:9-22
Module not found: Error: Can't resolve 'os' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "os": require.resolve("os-browserify/browser") }'
	- install 'os-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "os": false }
ERROR in ./node_modules/winston/dist/winston/rejection-handler.js 47:9-22
Module not found: Error: Can't resolve 'os' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "os": require.resolve("os-browserify/browser") }'
	- install 'os-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "os": false }
ERROR in ./node_modules/winston/dist/winston/tail-file.js 10:9-22
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston'
ERROR in ./node_modules/winston/dist/winston/transports/console.js 90:9-22
Module not found: Error: Can't resolve 'os' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston\transports'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "os": require.resolve("os-browserify/browser") }'
	- install 'os-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "os": false }
ERROR in ./node_modules/winston/dist/winston/transports/file.js 93:9-22
Module not found: Error: Can't resolve 'fs' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston\transports'
ERROR in ./node_modules/winston/dist/winston/transports/file.js 94:11-26
Module not found: Error: Can't resolve 'path' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston\transports'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "path": require.resolve("path-browserify") }'
	- install 'path-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "path": false }
ERROR in ./node_modules/winston/dist/winston/transports/file.js 96:11-26
Module not found: Error: Can't resolve 'zlib' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston\transports'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "zlib": require.resolve("browserify-zlib") }'
	- install 'browserify-zlib'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "zlib": false }
ERROR in ./node_modules/winston/dist/winston/transports/file.js 104:9-22
Module not found: Error: Can't resolve 'os' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston\transports'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "os": require.resolve("os-browserify/browser") }'
	- install 'os-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "os": false }
ERROR in ./node_modules/winston/dist/winston/transports/http.js 121:11-26
Module not found: Error: Can't resolve 'http' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston\transports'
Did you mean './http'?
Requests that should resolve in the current directory need to start with './'.
Requests that start with a name are treated as module requests and resolve within module directories (node_modules, P:\Jeff Stuff\temporal_edition\node_modules).
If changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "http": require.resolve("stream-http") }'
	- install 'stream-http'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "http": false }
ERROR in ./node_modules/winston/dist/winston/transports/http.js 122:12-28
Module not found: Error: Can't resolve 'https' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston\transports'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "https": require.resolve("https-browserify") }'
	- install 'https-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "https": false }
ERROR in ./node_modules/winston/dist/winston/transports/http.js 126:16-48
Module not found: Error: Can't resolve 'safe-stable-stringify' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston\transports'
ERROR in ./node_modules/winston/dist/winston/transports/stream.js 92:9-22
Module not found: Error: Can't resolve 'os' in 'P:\Jeff Stuff\temporal_edition\node_modules\winston\dist\winston\transports'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "os": require.resolve("os-browserify/browser") }'
	- install 'os-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "os": false }
ERROR
[eslint] EPERM: operation not permitted, open 'P:\Jeff Stuff\temporal_edition\node_modules\.cache\.eslintcache'
ERROR in src/App.tsx:13:44
TS2554: Expected 3 arguments, but got 1.
    11 |   const [monitoringService] = useState(() => new MonitoringService());
    12 |   const [audioService] = useState(() => new DjinnAudioService(monitoringService));
  > 13 |   const [temporalService] = useState(() => new TemporalEditionService(monitoringService));
       |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    14 |
    15 |   useEffect(() => {
    16 |     const initializeServices = async () => {
ERROR in src/App.tsx:24:45
TS2345: Argument of type 'void' is not assignable to parameter of type 'TemporalData'.
    22 |         const interval = setInterval(async () => {
    23 |           const data = await temporalService.generateAndExportReports();
  > 24 |           monitoringService.logTemporalData(data);
       |                                             ^^^^
    25 |         }, 60000); // Collect data every minute
    26 |
    27 |         return () => clearInterval(interval);
ERROR in src/App.tsx:62:8
TS2739: Type '{ onSessionStart: () => void; onSessionEnd: () => void; }' is missing the following properties from type 'SecureWhaleInterfaceProps': riddler, steward
    60 |   return (
    61 |     <div className="App">
  > 62 |       <SecureWhaleInterface
       |        ^^^^^^^^^^^^^^^^^^^^
    63 |         onSessionStart={handleSessionStart}
    64 |         onSessionEnd={handleSessionEnd}
    65 |       />
ERROR in src/components/StewardComparison.tsx:88:21
TS2345: Argument of type '{ name: string; priority: string; description: string; }' is not assignable to parameter of type '{ metric: string; currentValue: number; targetValue: number; improvement: number; unit: string; }'.
  Object literal may only specify known properties, and 'name' does not exist in type '{ metric: string; currentValue: number; targetValue: number; improvement: number; unit: string; }'.
    86 |             if (difference < -10) {
    87 |                 paths.push({
  > 88 |                     name: metric.name,
       |                     ^^^^^^^^^^^^^^^^^
    89 |                     priority: 'high',
    90 |                     description: `Focus on improving ${metric.name.toLowerCase()} through targeted exercises and practice.`
    91 |                 });
ERROR in src/components/StewardComparison.tsx:94:21
TS2345: Argument of type '{ name: string; priority: string; description: string; }' is not assignable to parameter of type '{ metric: string; currentValue: number; targetValue: number; improvement: number; unit: string; }'.
  Object literal may only specify known properties, and 'name' does not exist in type '{ metric: string; currentValue: number; targetValue: number; improvement: number; unit: string; }'.
    92 |             } else if (difference < 0) {
    93 |                 paths.push({
  > 94 |                     name: metric.name,
       |                     ^^^^^^^^^^^^^^^^^
    95 |                     priority: 'medium',
    96 |                     description: `Continue developing ${metric.name.toLowerCase()} with regular practice.`
    97 |                 });
ERROR in src/components/StewardComparison.tsx:178:58
TS2339: Property 'priority' does not exist on type '{ metric: string; currentValue: number; targetValue: number; improvement: number; unit: string; }'.
    176 |                         <div
    177 |                             key={index}
  > 178 |                             className={`path-card ${path.priority}`}
        |                                                          ^^^^^^^^
    179 |                             onClick={() => onLearningPathSelect(path.name)}
    180 |                         >
    181 |                             <h4>{path.name}</h4>
ERROR in src/components/StewardComparison.tsx:179:70
TS2339: Property 'name' does not exist on type '{ metric: string; currentValue: number; targetValue: number; improvement: number; unit: string; }'.
    177 |                             key={index}
    178 |                             className={`path-card ${path.priority}`}
  > 179 |                             onClick={() => onLearningPathSelect(path.name)}
        |                                                                      ^^^^
    180 |                         >
    181 |                             <h4>{path.name}</h4>
    182 |                             <p>{path.description}</p>
ERROR in src/components/StewardComparison.tsx:181:39
TS2339: Property 'name' does not exist on type '{ metric: string; currentValue: number; targetValue: number; improvement: number; unit: string; }'.
    179 |                             onClick={() => onLearningPathSelect(path.name)}
    180 |                         >
  > 181 |                             <h4>{path.name}</h4>
        |                                       ^^^^
    182 |                             <p>{path.description}</p>
    183 |                             <div className="path-priority">{path.priority.toUpperCase()}</div>
    184 |                         </div>
ERROR in src/components/StewardComparison.tsx:182:38
TS2339: Property 'description' does not exist on type '{ metric: string; currentValue: number; targetValue: number; improvement: number; unit: string; }'.
    180 |                         >
    181 |                             <h4>{path.name}</h4>
  > 182 |                             <p>{path.description}</p>
        |                                      ^^^^^^^^^^^
    183 |                             <div className="path-priority">{path.priority.toUpperCase()}</div>
    184 |                         </div>
    185 |                     ))}
ERROR in src/components/StewardComparison.tsx:183:66
TS2339: Property 'priority' does not exist on type '{ metric: string; currentValue: number; targetValue: number; improvement: number; unit: string; }'.
    181 |                             <h4>{path.name}</h4>
    182 |                             <p>{path.description}</p>
  > 183 |                             <div className="path-priority">{path.priority.toUpperCase()}</div>
        |                                                                  ^^^^^^^^
    184 |                         </div>
    185 |                     ))}
    186 |                 </div>
ERROR in src/data/whaleVocabulary.ts:746:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    744 |                 social: ["mentorship", "knowledge acquisition"],
    745 |                 emotional: ["curious", "eager"],
  > 746 |                 behavioral: ["observation", "practice"],
        |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    747 |                 seasonal: ["learning season"]
    748 |             },
    749 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:766:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    764 |                 social: ["tutoría", "adquisición de conocimiento"],
    765 |                 emotional: ["curioso", "ansioso"],
  > 766 |                 behavioral: ["observación", "práctica"],
        |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    767 |                 seasonal: ["temporada de aprendizaje"]
    768 |             },
    769 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:786:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    784 |                 social: ["mentorat", "acquisition de connaissances"],
    785 |                 emotional: ["curieux", "impatient"],
  > 786 |                 behavioral: ["observation", "pratique"],
        |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    787 |                 seasonal: ["saison d'apprentissage"]
    788 |             },
    789 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:806:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    804 |                 social: ["Mentoring", "Wissenserwerb"],
    805 |                 emotional: ["neugierig", "eifrig"],
  > 806 |                 behavioral: ["Beobachtung", "Übung"],
        |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    807 |                 seasonal: ["Lernsaison"]
    808 |             },
    809 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:826:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    824 |                 social: ["指导", "知识获取"],
    825 |                 emotional: ["好奇", "渴望"],
  > 826 |                 behavioral: ["观察", "练习"],
        |                 ^^^^^^^^^^^^^^^^^^^^^^^^
    827 |                 seasonal: ["学习季节"]
    828 |             },
    829 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:846:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    844 |                 social: ["メンタリング", "知識獲得"],
    845 |                 emotional: ["好奇心", "熱心"],
  > 846 |                 behavioral: ["観察", "練習"],
        |                 ^^^^^^^^^^^^^^^^^^^^^^^^
    847 |                 seasonal: ["学習期"]
    848 |             },
    849 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:866:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    864 |                 social: ["mentoria", "aquisição de conhecimento"],
    865 |                 emotional: ["curioso", "ansioso"],
  > 866 |                 behavioral: ["observação", "prática"],
        |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    867 |                 seasonal: ["temporada de aprendizagem"]
    868 |             },
    869 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:886:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    884 |                 social: ["наставничество", "приобретение знаний"],
    885 |                 emotional: ["любопытный", "нетерпеливый"],
  > 886 |                 behavioral: ["наблюдение", "практика"],
        |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    887 |                 seasonal: ["сезон обучения"]
    888 |             },
    889 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:1394:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    1392 |                 social: ["group bonding", "community"],
    1393 |                 emotional: ["welcoming", "friendly"],
  > 1394 |                 behavioral: ["socializing", "singing"],
         |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    1395 |                 seasonal: ["social season"]
    1396 |             },
    1397 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:1414:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    1412 |                 social: ["vínculo grupal", "comunidad"],
    1413 |                 emotional: ["acogedor", "amigable"],
  > 1414 |                 behavioral: ["socializando", "cantando"],
         |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    1415 |                 seasonal: ["temporada social"]
    1416 |             },
    1417 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:1434:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    1432 |                 social: ["lien de groupe", "communauté"],
    1433 |                 emotional: ["accueillant", "amical"],
  > 1434 |                 behavioral: ["socialisation", "chant"],
         |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    1435 |                 seasonal: ["saison sociale"]
    1436 |             },
    1437 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:1454:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    1452 |                 social: ["Gruppenbindung", "Gemeinschaft"],
    1453 |                 emotional: ["einladend", "freundlich"],
  > 1454 |                 behavioral: ["Sozialisierung", "Gesang"],
         |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    1455 |                 seasonal: ["soziale Saison"]
    1456 |             },
    1457 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:1474:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    1472 |                 social: ["群体联系", "社区"],
    1473 |                 emotional: ["欢迎", "友好"],
  > 1474 |                 behavioral: ["社交", "歌唱"],
         |                 ^^^^^^^^^^^^^^^^^^^^^^^^
    1475 |                 seasonal: ["社交季节"]
    1476 |             },
    1477 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:1494:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    1492 |                 social: ["グループの絆", "コミュニティ"],
    1493 |                 emotional: ["歓迎", "友好的"],
  > 1494 |                 behavioral: ["社交", "歌"],
         |                 ^^^^^^^^^^^^^^^^^^^^^^^
    1495 |                 seasonal: ["社交シーズン"]
    1496 |             },
    1497 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:1514:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    1512 |                 social: ["vínculo grupal", "comunidade"],
    1513 |                 emotional: ["acolhedor", "amigável"],
  > 1514 |                 behavioral: ["socializando", "cantando"],
         |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    1515 |                 seasonal: ["temporada social"]
    1516 |             },
    1517 |             sentiment: {
ERROR in src/data/whaleVocabulary.ts:1534:17
TS2322: Type '{ environmental: string[]; social: string[]; emotional: string[]; behavioral: string[]; seasonal: string[]; }' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Object literal may only specify known properties, and 'behavioral' does not exist in type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    1532 |                 social: ["групповая связь", "сообщество"],
    1533 |                 emotional: ["приветливый", "дружелюбный"],
  > 1534 |                 behavioral: ["общение", "пение"],
         |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    1535 |                 seasonal: ["социальный сезон"]
    1536 |             },
    1537 |             sentiment: {
ERROR in src/DjinnCouncilService.ts:731:47
TS2345: Argument of type 'string[]' is not assignable to parameter of type 'SystemMetrics[]'.
  Type 'string' is not assignable to type 'SystemMetrics'.
    729 |     async learnFromBehavior(metrics: ImportedBehaviorMetrics) {
    730 |         return {
  > 731 |             adaptations: this.analyzePatterns(metrics.patterns),
        |                                               ^^^^^^^^^^^^^^^^
    732 |             predictions: this.predictTrends(metrics.trends),
    733 |         };
    734 |     }
ERROR in src/DjinnCouncilService.ts:741:13
TS2322: Type '{ value: number; timestamp: number; alignmentScore: number; stabilityIndex: number; errorRate: number; responseTime: number; throughput: number; metadata: { deviation: number; isAnomaly: boolean; }; }' is not assignable to type 'SystemMetrics'.
  Object literal may only specify known properties, and 'alignmentScore' does not exist in type 'SystemMetrics'.
    739 |             value,
    740 |             timestamp,
  > 741 |             alignmentScore: 0,
        |             ^^^^^^^^^^^^^^^^^
    742 |             stabilityIndex: 0,
    743 |             errorRate: 0,
    744 |             responseTime: 0,
ERROR in src/DjinnCouncilService.ts:771:21
TS2322: Type 'SystemMetrics[]' is not assignable to type 'import("P:/Jeff Stuff/temporal_edition/src/types").SystemMetrics[]'.
  Type 'SystemMetrics' is missing the following properties from type 'SystemMetrics': alignmentScore, stabilityIndex, responseTime, throughput
    769 |                 impact: this.calculatePatternImpact(anomalies.anomalies.length / metrics.length),
    770 |                 metadata: {
  > 771 |                     points: anomalies.anomalies.map(a => this.createSystemMetrics(a.value, a.timestamp)),
        |                     ^^^^^^
    772 |                     error: anomalies.stdDev,
    773 |                     distance: anomalies.threshold
    774 |                 }
ERROR in src/DjinnCouncilService.ts:1357:28
TS2551: Property 'determineAnomalySeverity' does not exist on type 'DjinnCouncilService'. Did you mean 'determineSeverity'?
    1355 |             score: anomalies.anomalies.reduce((sum, a) => sum + a.deviation, 0) / anomalies.anomalies.length,
    1356 |             threshold: anomalies.threshold,
  > 1357 |             severity: this.determineAnomalySeverity(anomalies.anomalies.length / metricsData.length),
         |                            ^^^^^^^^^^^^^^^^^^^^^^^^
    1358 |             anomalies: anomalies.anomalies,
    1359 |             mean: anomalies.mean,
    1360 |             stdDev: anomalies.stdDev
ERROR in src/DjinnCouncilService.ts:1559:57
TS2345: Argument of type 'number[]' is not assignable to parameter of type 'SystemMetrics[]'.
  Type 'number' is not assignable to type 'SystemMetrics'.
    1557 |         const values = metrics.map(m => m.value);
    1558 |         const period = this.calculateSeasonalPeriod(values);
  > 1559 |         const strength = this.calculateSeasonalStrength(values, period);
         |                                                         ^^^^^^
    1560 |         
    1561 |         return {
    1562 |             hasSeasonality: strength > 0.5,
ERROR in src/DjinnCouncilService.ts:1688:29
TS2339: Property 'calculatePValue' does not exist on type 'DjinnCouncilService'.
    1686 |         const values = metrics.map(m => m.value);
    1687 |         const correlation = this.calculateCorrelation(values);
  > 1688 |         const pValue = this.calculatePValue(correlation, metrics.length);
         |                             ^^^^^^^^^^^^^^^
    1689 |         const significance = pValue < 0.05 ? 'significant' : 'not significant';
    1690 |         
    1691 |         return {
ERROR in src/DjinnCouncilService.ts:1756:22
TS18048: 'metric1.latency' is possibly 'undefined'.
    1754 |         return Math.sqrt(
    1755 |             Math.pow(metric1.value - metric2.value, 2) +
  > 1756 |             Math.pow(metric1.latency - metric2.latency, 2) +
         |                      ^^^^^^^^^^^^^^^
    1757 |             Math.pow(metric1.resourceUsage - metric2.resourceUsage, 2) +
    1758 |             Math.pow(metric1.anomalyDeviation - metric2.anomalyDeviation, 2)
    1759 |         );
ERROR in src/DjinnCouncilService.ts:1756:40
TS18048: 'metric2.latency' is possibly 'undefined'.
    1754 |         return Math.sqrt(
    1755 |             Math.pow(metric1.value - metric2.value, 2) +
  > 1756 |             Math.pow(metric1.latency - metric2.latency, 2) +
         |                                        ^^^^^^^^^^^^^^^
    1757 |             Math.pow(metric1.resourceUsage - metric2.resourceUsage, 2) +
    1758 |             Math.pow(metric1.anomalyDeviation - metric2.anomalyDeviation, 2)
    1759 |         );
ERROR in src/DjinnCouncilService.ts:1757:22
TS18048: 'metric1.resourceUsage' is possibly 'undefined'.
    1755 |             Math.pow(metric1.value - metric2.value, 2) +
    1756 |             Math.pow(metric1.latency - metric2.latency, 2) +
  > 1757 |             Math.pow(metric1.resourceUsage - metric2.resourceUsage, 2) +
         |                      ^^^^^^^^^^^^^^^^^^^^^
    1758 |             Math.pow(metric1.anomalyDeviation - metric2.anomalyDeviation, 2)
    1759 |         );
    1760 |     }
ERROR in src/DjinnCouncilService.ts:1757:46
TS18048: 'metric2.resourceUsage' is possibly 'undefined'.
    1755 |             Math.pow(metric1.value - metric2.value, 2) +
    1756 |             Math.pow(metric1.latency - metric2.latency, 2) +
  > 1757 |             Math.pow(metric1.resourceUsage - metric2.resourceUsage, 2) +
         |                                              ^^^^^^^^^^^^^^^^^^^^^
    1758 |             Math.pow(metric1.anomalyDeviation - metric2.anomalyDeviation, 2)
    1759 |         );
    1760 |     }
ERROR in src/DjinnCouncilService.ts:1758:22
TS18048: 'metric1.anomalyDeviation' is possibly 'undefined'.
    1756 |             Math.pow(metric1.latency - metric2.latency, 2) +
    1757 |             Math.pow(metric1.resourceUsage - metric2.resourceUsage, 2) +
  > 1758 |             Math.pow(metric1.anomalyDeviation - metric2.anomalyDeviation, 2)
         |                      ^^^^^^^^^^^^^^^^^^^^^^^^
    1759 |         );
    1760 |     }
    1761 | } 
ERROR in src/DjinnCouncilService.ts:1758:49
TS18048: 'metric2.anomalyDeviation' is possibly 'undefined'.
    1756 |             Math.pow(metric1.latency - metric2.latency, 2) +
    1757 |             Math.pow(metric1.resourceUsage - metric2.resourceUsage, 2) +
  > 1758 |             Math.pow(metric1.anomalyDeviation - metric2.anomalyDeviation, 2)
         |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^
    1759 |         );
    1760 |     }
    1761 | } 
ERROR in src/EmailQueueService.ts:1:19
TS2307: Cannot find module 'bull' or its corresponding type declarations.
  > 1 | import Queue from 'bull';
      |                   ^^^^^^
    2 | import { EmailService } from './EmailService';
    3 | import { QueueMetricsService } from './QueueMetricsService';
    4 | import { RetryStrategyService } from './RetryStrategyService';
ERROR in src/EmailService.ts:1:20
TS2307: Cannot find module '@sendgrid/mail' or its corresponding type declarations.
  > 1 | import sgMail from '@sendgrid/mail';
      |                    ^^^^^^^^^^^^^^^^
    2 | import { config } from './config';
    3 | import logger from './logger';
    4 | import { EmailServiceConfig } from './notification_types';
ERROR in src/harmonics/implementations/DataHashHarmonicSignatureProvider.ts:1:30
TS2307: Cannot find module 'uuid' or its corresponding type declarations.
  > 1 | import { v4 as uuidv4 } from 'uuid';
      |                              ^^^^^^
    2 | import { ICryptoProvider } from '../../crypto/interfaces/ICryptoProvider';
    3 | import { Entity, HarmonicSignature, IHarmonicSignatureProvider } from '../interfaces/IHarmonicSignatureProvider';
    4 |
ERROR in src/harmonics/tests/RecursiveFeedbackLoop.test.ts:1:30
TS2307: Cannot find module 'uuid' or its corresponding type declarations.
  > 1 | import { v4 as uuidv4 } from 'uuid';
      |                              ^^^^^^
    2 | import { SodiumCryptoProvider } from '../../crypto/implementations/SodiumCryptoProvider';
    3 | import { DataHashHarmonicSignatureProvider } from '../implementations/DataHashHarmonicSignatureProvider';
    4 | import { RecursiveFeedbackLoop } from '../implementations/RecursiveFeedbackLoop';
ERROR in src/index.tsx:3:8
TS1192: Module '"P:/Jeff Stuff/temporal_edition/src/app"' has no default export.
    1 | import React from 'react';
    2 | import ReactDOM from 'react-dom/client';
  > 3 | import App from './app';
      |        ^^^
    4 | import './index.css';
    5 | import reportWebVitals from './reportWebVitals';
    6 |
ERROR in src/PoseidonVoiceService.ts:137:13
TS2322: Type 'Promise<MetricObjectWithValues<MetricValue<string>>>' is not assignable to type 'number'.
    135 |     public async getSignalMetrics(): Promise<SignalMetrics> {
    136 |         return {
  > 137 |             whaleSignals: this.signalGauge.get({ signal_type: 'whale' }),
        |             ^^^^^^^^^^^^
    138 |             dolphinSignals: this.signalGauge.get({ signal_type: 'dolphin' }),
    139 |             humanSignals: this.signalGauge.get({ signal_type: 'human' }),
    140 |             translationAccuracy: this.calculateTranslationAccuracy(),
ERROR in src/PoseidonVoiceService.ts:137:48
TS2554: Expected 0 arguments, but got 1.
    135 |     public async getSignalMetrics(): Promise<SignalMetrics> {
    136 |         return {
  > 137 |             whaleSignals: this.signalGauge.get({ signal_type: 'whale' }),
        |                                                ^^^^^^^^^^^^^^^^^^^^^^^^
    138 |             dolphinSignals: this.signalGauge.get({ signal_type: 'dolphin' }),
    139 |             humanSignals: this.signalGauge.get({ signal_type: 'human' }),
    140 |             translationAccuracy: this.calculateTranslationAccuracy(),
ERROR in src/PoseidonVoiceService.ts:138:13
TS2322: Type 'Promise<MetricObjectWithValues<MetricValue<string>>>' is not assignable to type 'number'.
    136 |         return {
    137 |             whaleSignals: this.signalGauge.get({ signal_type: 'whale' }),
  > 138 |             dolphinSignals: this.signalGauge.get({ signal_type: 'dolphin' }),
        |             ^^^^^^^^^^^^^^
    139 |             humanSignals: this.signalGauge.get({ signal_type: 'human' }),
    140 |             translationAccuracy: this.calculateTranslationAccuracy(),
    141 |             resonanceLevel: this.calculateResonanceLevel()
ERROR in src/PoseidonVoiceService.ts:138:50
TS2554: Expected 0 arguments, but got 1.
    136 |         return {
    137 |             whaleSignals: this.signalGauge.get({ signal_type: 'whale' }),
  > 138 |             dolphinSignals: this.signalGauge.get({ signal_type: 'dolphin' }),
        |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
    139 |             humanSignals: this.signalGauge.get({ signal_type: 'human' }),
    140 |             translationAccuracy: this.calculateTranslationAccuracy(),
    141 |             resonanceLevel: this.calculateResonanceLevel()
ERROR in src/PoseidonVoiceService.ts:139:13
TS2322: Type 'Promise<MetricObjectWithValues<MetricValue<string>>>' is not assignable to type 'number'.
    137 |             whaleSignals: this.signalGauge.get({ signal_type: 'whale' }),
    138 |             dolphinSignals: this.signalGauge.get({ signal_type: 'dolphin' }),
  > 139 |             humanSignals: this.signalGauge.get({ signal_type: 'human' }),
        |             ^^^^^^^^^^^^
    140 |             translationAccuracy: this.calculateTranslationAccuracy(),
    141 |             resonanceLevel: this.calculateResonanceLevel()
    142 |         };
ERROR in src/PoseidonVoiceService.ts:139:48
TS2554: Expected 0 arguments, but got 1.
    137 |             whaleSignals: this.signalGauge.get({ signal_type: 'whale' }),
    138 |             dolphinSignals: this.signalGauge.get({ signal_type: 'dolphin' }),
  > 139 |             humanSignals: this.signalGauge.get({ signal_type: 'human' }),
        |                                                ^^^^^^^^^^^^^^^^^^^^^^^^
    140 |             translationAccuracy: this.calculateTranslationAccuracy(),
    141 |             resonanceLevel: this.calculateResonanceLevel()
    142 |         };
ERROR in src/QueueMetricsService.ts:2:19
TS2307: Cannot find module 'bull' or its corresponding type declarations.
    1 | import { Counter, Histogram, Gauge } from 'prom-client';
  > 2 | import Queue from 'bull';
      |                   ^^^^^^
    3 | import { NotificationPriority } from './notification_types';
    4 |
    5 | export class QueueMetricsService {
ERROR in src/QueueMetricsService.ts:98:41
TS2339: Property 'registry' does not exist on type 'Counter<string>'.
     96 |
     97 |     getMetrics(): string {
  >  98 |         return this.jobCompletedCounter.registry.metrics();
        |                                         ^^^^^^^^
     99 |     }
    100 | } 
ERROR in src/server.ts:2:18
TS2307: Cannot find module 'cors' or its corresponding type declarations.
    1 | import express, { Request, Response, NextFunction } from 'express';
  > 2 | import cors from 'cors';
      |                  ^^^^^^
    3 | import helmet from 'helmet';
    4 | import compression from 'compression';
    5 | import rateLimit from 'express-rate-limit';
ERROR in src/server.ts:3:20
TS2307: Cannot find module 'helmet' or its corresponding type declarations.
    1 | import express, { Request, Response, NextFunction } from 'express';
    2 | import cors from 'cors';
  > 3 | import helmet from 'helmet';
      |                    ^^^^^^^^
    4 | import compression from 'compression';
    5 | import rateLimit from 'express-rate-limit';
    6 | import { SystemOrchestrator } from './services/SystemOrchestrator';
ERROR in src/server.ts:4:25
TS7016: Could not find a declaration file for module 'compression'. 'P:/Jeff Stuff/temporal_edition/node_modules/compression/index.js' implicitly has an 'any' type.
  Try `npm i --save-dev @types/compression` if it exists or add a new declaration (.d.ts) file containing `declare module 'compression';`
    2 | import cors from 'cors';
    3 | import helmet from 'helmet';
  > 4 | import compression from 'compression';
      |                         ^^^^^^^^^^^^^
    5 | import rateLimit from 'express-rate-limit';
    6 | import { SystemOrchestrator } from './services/SystemOrchestrator';
    7 | import { AlignmentStage } from './services/TemporalSequencer';
ERROR in src/server.ts:5:23
TS2307: Cannot find module 'express-rate-limit' or its corresponding type declarations.
    3 | import helmet from 'helmet';
    4 | import compression from 'compression';
  > 5 | import rateLimit from 'express-rate-limit';
      |                       ^^^^^^^^^^^^^^^^^^^^
    6 | import { SystemOrchestrator } from './services/SystemOrchestrator';
    7 | import { AlignmentStage } from './services/TemporalSequencer';
    8 | import { createLogger } from './utils/logger';
ERROR in src/services/EmotionalPatternAnalysisService.ts:4:3
TS2724: '"../types/whale"' has no exported member named 'EmotionalContext'. Did you mean 'WhaleEmotionalContext'?
    2 |   WhaleEmotion, 
    3 |   EmotionalAnalysis, 
  > 4 |   EmotionalContext,
      |   ^^^^^^^^^^^^^^^^
    5 |   EmotionalScore,
    6 |   EnvironmentalContext
    7 | } from '../types/whale';
ERROR in src/services/EmotionalPatternAnalysisService.ts:77:19
TS2339: Property 'currentState' does not exist on type 'EmotionalAnalysis'.
    75 |     const recentEmotions = this.patternHistory
    76 |       .slice(-5)
  > 77 |       .map(a => a.currentState.primaryEmotion);
       |                   ^^^^^^^^^^^^
    78 |
    79 |     const pattern = this.identifyPatternType(recentEmotions);
    80 |     const confidence = this.calculatePatternConfidence(pattern, recentEmotions);
ERROR in src/services/EmotionalPatternAnalysisService.ts:96:63
TS2339: Property 'currentState' does not exist on type 'EmotionalAnalysis'.
    94 |   private analyzeTrends(): EmotionalTrend[] {
    95 |     const trends: EmotionalTrend[] = [];
  > 96 |     const emotionIntensities = this.patternHistory.map(a => a.currentState.intensity);
       |                                                               ^^^^^^^^^^^^
    97 |     const emotionStabilities = this.patternHistory.map(a => a.stabilityMetrics.consistency);
    98 |
    99 |     // Analyze intensity trend
ERROR in src/services/EmotionalPatternAnalysisService.ts:97:63
TS2339: Property 'stabilityMetrics' does not exist on type 'EmotionalAnalysis'.
     95 |     const trends: EmotionalTrend[] = [];
     96 |     const emotionIntensities = this.patternHistory.map(a => a.currentState.intensity);
  >  97 |     const emotionStabilities = this.patternHistory.map(a => a.stabilityMetrics.consistency);
        |                                                               ^^^^^^^^^^^^^^^^
     98 |
     99 |     // Analyze intensity trend
    100 |     const intensityTrend = this.calculateTrendMetrics(emotionIntensities);
ERROR in src/services/EmotionalPatternAnalysisService.ts:130:19
TS2339: Property 'currentState' does not exist on type 'EmotionalAnalysis'.
    128 |     const recentEmotions = this.patternHistory
    129 |       .slice(-10)
  > 130 |       .map(a => a.currentState.primaryEmotion);
        |                   ^^^^^^^^^^^^
    131 |
    132 |     const transitionProbabilities = this.calculateTransitionProbabilities(recentEmotions);
    133 |     const nextEmotion = this.predictNextEmotion(transitionProbabilities);
ERROR in src/services/EnvironmentalDataIntegrator.ts:11:13
TS2322: Type '{ temperature: number; salinity: number; pressure: number; current: number; visibility: number; lightLevel: number; }' is not assignable to type 'WaterConditions'.
  Object literal may only specify known properties, and 'pressure' does not exist in type 'WaterConditions'.
     9 |             temperature: 20,
    10 |             salinity: 35,
  > 11 |             pressure: 1,
       |             ^^^^^^^^^^^
    12 |             current: 0.5,
    13 |             visibility: 15,
    14 |             lightLevel: 0.7
ERROR in src/services/EnvironmentalDataIntegrator.ts:31:33
TS2339: Property 'current' does not exist on type 'WaterConditions'.
    29 |
    30 |     public getCurrent(): number {
  > 31 |         return this.currentData.current;
       |                                 ^^^^^^^
    32 |     }
    33 |
    34 |     public getVisibility(): number {
ERROR in src/services/EnvironmentalDataIntegrator.ts:57:17
TS2322: Type 'string' is not assignable to type 'number'.
    55 |                 groupComposition: 'unknown',
    56 |                 interactionIntensity: 0.5,
  > 57 |                 socialHierarchy: 'unknown'
       |                 ^^^^^^^^^^^^^^^
    58 |             }
    59 |         };
    60 |
ERROR in src/services/EnvironmentalDataIntegrator.ts:73:30
TS2339: Property 'current' does not exist on type 'WaterConditions'.
    71 |
    72 |     public getEnvironmentalScore(): number {
  > 73 |         const { temperature, current, visibility } = this.currentData;
       |                              ^^^^^^^
    74 |         
    75 |         const temperatureScore = this.calculateTemperatureScore(temperature);
    76 |         const currentScore = this.calculateCurrentScore(current);
ERROR in src/services/JamSessionService.ts:55:13
TS2739: Type 'EnvironmentalSignal' is missing the following properties from type 'EnvironmentalContext': pressure, marineLifePresence
    53 |             resultingHarmony: this.calculateResultingHarmony(sequence),
    54 |             feedback: this.assessHarmonicFeedback(sequence),
  > 55 |             environmentalChanges: this.poseidon.getCurrentEnvironmentalData()
       |             ^^^^^^^^^^^^^^^^^^^^
    56 |         };
    57 |     }
    58 |
ERROR in src/services/JamSessionService.ts:90:9
TS2322: Type 'EnvironmentalSignal' is not assignable to type 'EnvironmentalContext'.
    88 |         // Calculate final environmental impact
    89 |         const finalEnvironmentalChanges = this.poseidon.getCurrentEnvironmentalData();
  > 90 |         this.currentSession.environmentalChanges = finalEnvironmentalChanges;
       |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    91 |
    92 |         const completedSession = this.currentSession;
    93 |         this.currentSession = null;
ERROR in src/services/JamSessionService.ts:161:78
TS2345: Argument of type 'EnvironmentalSignal' is not assignable to parameter of type 'EnvironmentalContext'.
    159 |         return {
    160 |             resonance: this.calculateResonance(sequence.frequencies, sequence.amplitude),
  > 161 |             environmentalImpact: this.calculateEnvironmentalImpact(sequence, environmentalContext),
        |                                                                              ^^^^^^^^^^^^^^^^^^^^
    162 |             emotionalAlignment: this.calculateEmotionalAlignment(sequence),
    163 |             musicalCoherence: this.calculateMusicalCoherence(sequence),
    164 |             ecosystemResponse: this.calculateEcosystemResponse(sequence, environmentalContext)
ERROR in src/services/JamSessionService.ts:164:74
TS2345: Argument of type 'EnvironmentalSignal' is not assignable to parameter of type 'EnvironmentalContext'.
    162 |             emotionalAlignment: this.calculateEmotionalAlignment(sequence),
    163 |             musicalCoherence: this.calculateMusicalCoherence(sequence),
  > 164 |             ecosystemResponse: this.calculateEcosystemResponse(sequence, environmentalContext)
        |                                                                          ^^^^^^^^^^^^^^^^^^^^
    165 |         };
    166 |     }
    167 |
ERROR in src/services/MonitoringService.ts:44:38
TS2532: Object is possibly 'undefined'.
    42 |
    43 |         // Check alignment score
  > 44 |         if (metrics.alignmentScore < this.thresholds.alignmentScore) {
       |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    45 |             violations.push(this.createViolation(systemId, 'alignment', 'high', 
    46 |                 `Alignment score ${metrics.alignmentScore} below threshold ${this.thresholds.alignmentScore}`,
    47 |                 { alignmentScore: metrics.alignmentScore }
ERROR in src/services/MonitoringService.ts:52:38
TS2532: Object is possibly 'undefined'.
    50 |
    51 |         // Check stability index
  > 52 |         if (metrics.stabilityIndex < this.thresholds.stabilityIndex) {
       |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    53 |             violations.push(this.createViolation(systemId, 'stability', 'medium',
    54 |                 `Stability index ${metrics.stabilityIndex} below threshold ${this.thresholds.stabilityIndex}`,
    55 |                 { stabilityIndex: metrics.stabilityIndex }
ERROR in src/services/MonitoringService.ts:60:33
TS2532: Object is possibly 'undefined'.
    58 |
    59 |         // Check error rate
  > 60 |         if (metrics.errorRate > this.thresholds.errorRate) {
       |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
    61 |             violations.push(this.createViolation(systemId, 'performance', 'high',
    62 |                 `Error rate ${metrics.errorRate} above threshold ${this.thresholds.errorRate}`,
    63 |                 { errorRate: metrics.errorRate }
ERROR in src/services/MonitoringService.ts:68:36
TS2532: Object is possibly 'undefined'.
    66 |
    67 |         // Check response time
  > 68 |         if (metrics.responseTime > this.thresholds.responseTime) {
       |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    69 |             violations.push(this.createViolation(systemId, 'performance', 'medium',
    70 |                 `Response time ${metrics.responseTime}ms above threshold ${this.thresholds.responseTime}ms`,
    71 |                 { responseTime: metrics.responseTime }
ERROR in src/services/MonitoringService.ts:86:55
TS2345: Argument of type 'import("P:/Jeff Stuff/temporal_edition/src/types").AnalysisResult' is not assignable to parameter of type 'import("P:/Jeff Stuff/temporal_edition/src/services/BreathMirrorAnalysis").AnalysisResult'.
  Type 'AnalysisResult' is missing the following properties from type 'AnalysisResult': metrics, recommendations, warnings, alignmentProgress
    84 |
    85 |     public async updateAnalysisMetrics(systemId: string, result: AnalysisResult): Promise<void> {
  > 86 |         metricsService.updateAnalysisResult(systemId, result);
       |                                                       ^^^^^^
    87 |         
    88 |         // Check for alignment issues in analysis results
    89 |         if (result.alignmentScore < this.thresholds.alignmentScore) {
ERROR in src/services/MonitoringService.ts:89:37
TS2532: Object is possibly 'undefined'.
    87 |         
    88 |         // Check for alignment issues in analysis results
  > 89 |         if (result.alignmentScore < this.thresholds.alignmentScore) {
       |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    90 |             this.recordViolations(systemId, [
    91 |                 this.createViolation(systemId, 'alignment', 'high',
    92 |                     `Analysis alignment score ${result.alignmentScore} below threshold ${this.thresholds.alignmentScore}`,
ERROR in src/services/MonitoringService.ts:100:57
TS2345: Argument of type 'import("P:/Jeff Stuff/temporal_edition/src/types").GovernanceStatus' is not assignable to parameter of type 'import("P:/Jeff Stuff/temporal_edition/src/services/GovernanceTracker").GovernanceStatus'.
  Property 'currentStage' is missing in type 'import("P:/Jeff Stuff/temporal_edition/src/types").GovernanceStatus' but required in type 'import("P:/Jeff Stuff/temporal_edition/src/services/GovernanceTracker").GovernanceStatus'.
     98 |
     99 |     public async updateGovernanceStatus(systemId: string, status: GovernanceStatus): Promise<void> {
  > 100 |         metricsService.updateGovernanceStatus(systemId, status);
        |                                                         ^^^^^^
    101 |
    102 |         // Check for governance violations
    103 |         if (status.violations.length > 0) {
ERROR in src/services/PoseidonSystem.ts:263:13
TS18048: 'adjustments' is possibly 'undefined'.
    261 |         adjustments: EcosystemUpdate['ecosystemChanges']['environmentalAdjustments']
    262 |     ): void {
  > 263 |         if (adjustments.temperature) {
        |             ^^^^^^^^^^^
    264 |             this.ecosystemStatus.environmentalMetrics.temperature += adjustments.temperature;
    265 |         }
    266 |         if (adjustments.depth) {
ERROR in src/services/PoseidonSystem.ts:264:70
TS18048: 'adjustments' is possibly 'undefined'.
    262 |     ): void {
    263 |         if (adjustments.temperature) {
  > 264 |             this.ecosystemStatus.environmentalMetrics.temperature += adjustments.temperature;
        |                                                                      ^^^^^^^^^^^
    265 |         }
    266 |         if (adjustments.depth) {
    267 |             this.ecosystemStatus.environmentalMetrics.depth += adjustments.depth;
ERROR in src/services/PoseidonSystem.ts:266:13
TS18048: 'adjustments' is possibly 'undefined'.
    264 |             this.ecosystemStatus.environmentalMetrics.temperature += adjustments.temperature;
    265 |         }
  > 266 |         if (adjustments.depth) {
        |             ^^^^^^^^^^^
    267 |             this.ecosystemStatus.environmentalMetrics.depth += adjustments.depth;
    268 |         }
    269 |         if (adjustments.salinity) {
ERROR in src/services/PoseidonSystem.ts:267:64
TS18048: 'adjustments' is possibly 'undefined'.
    265 |         }
    266 |         if (adjustments.depth) {
  > 267 |             this.ecosystemStatus.environmentalMetrics.depth += adjustments.depth;
        |                                                                ^^^^^^^^^^^
    268 |         }
    269 |         if (adjustments.salinity) {
    270 |             this.ecosystemStatus.environmentalMetrics.salinity += adjustments.salinity;
ERROR in src/services/PoseidonSystem.ts:269:13
TS18048: 'adjustments' is possibly 'undefined'.
    267 |             this.ecosystemStatus.environmentalMetrics.depth += adjustments.depth;
    268 |         }
  > 269 |         if (adjustments.salinity) {
        |             ^^^^^^^^^^^
    270 |             this.ecosystemStatus.environmentalMetrics.salinity += adjustments.salinity;
    271 |         }
    272 |     }
ERROR in src/services/PoseidonSystem.ts:270:67
TS18048: 'adjustments' is possibly 'undefined'.
    268 |         }
    269 |         if (adjustments.salinity) {
  > 270 |             this.ecosystemStatus.environmentalMetrics.salinity += adjustments.salinity;
        |                                                                   ^^^^^^^^^^^
    271 |         }
    272 |     }
    273 |
ERROR in src/services/PoseidonSystem.ts:277:13
TS18048: 'changes' is possibly 'undefined'.
    275 |         changes: EcosystemUpdate['ecosystemChanges']['populationChanges']
    276 |     ): void {
  > 277 |         if (changes.species) {
        |             ^^^^^^^
    278 |             this.ecosystemStatus.populationMetrics.totalSpecies = changes.species.length;
    279 |         }
    280 |         if (changes.count) {
ERROR in src/services/PoseidonSystem.ts:278:67
TS18048: 'changes' is possibly 'undefined'.
    276 |     ): void {
    277 |         if (changes.species) {
  > 278 |             this.ecosystemStatus.populationMetrics.totalSpecies = changes.species.length;
        |                                                                   ^^^^^^^
    279 |         }
    280 |         if (changes.count) {
    281 |             this.ecosystemStatus.populationMetrics.totalIndividuals = changes.count;
ERROR in src/services/PoseidonSystem.ts:280:13
TS18048: 'changes' is possibly 'undefined'.
    278 |             this.ecosystemStatus.populationMetrics.totalSpecies = changes.species.length;
    279 |         }
  > 280 |         if (changes.count) {
        |             ^^^^^^^
    281 |             this.ecosystemStatus.populationMetrics.totalIndividuals = changes.count;
    282 |         }
    283 |         if (changes.distribution) {
ERROR in src/services/PoseidonSystem.ts:281:71
TS18048: 'changes' is possibly 'undefined'.
    279 |         }
    280 |         if (changes.count) {
  > 281 |             this.ecosystemStatus.populationMetrics.totalIndividuals = changes.count;
        |                                                                       ^^^^^^^
    282 |         }
    283 |         if (changes.distribution) {
    284 |             changes.distribution.forEach((value, key) => {
ERROR in src/services/PoseidonSystem.ts:283:13
TS18048: 'changes' is possibly 'undefined'.
    281 |             this.ecosystemStatus.populationMetrics.totalIndividuals = changes.count;
    282 |         }
  > 283 |         if (changes.distribution) {
        |             ^^^^^^^
    284 |             changes.distribution.forEach((value, key) => {
    285 |                 this.ecosystemStatus.populationMetrics.distribution.set(key, value);
    286 |             });
ERROR in src/services/PoseidonSystem.ts:284:13
TS18048: 'changes' is possibly 'undefined'.
    282 |         }
    283 |         if (changes.distribution) {
  > 284 |             changes.distribution.forEach((value, key) => {
        |             ^^^^^^^
    285 |                 this.ecosystemStatus.populationMetrics.distribution.set(key, value);
    286 |             });
    287 |         }
ERROR in src/services/PoseidonSystem.ts:285:73
TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
    283 |         if (changes.distribution) {
    284 |             changes.distribution.forEach((value, key) => {
  > 285 |                 this.ecosystemStatus.populationMetrics.distribution.set(key, value);
        |                                                                         ^^^
    286 |             });
    287 |         }
    288 |     }
ERROR in src/services/PoseidonSystem.ts:381:19
TS2322: Type '{ timestamp: Date; temperature?: number | undefined; salinity?: number | undefined; currentSpeed?: number | undefined; currentDirection?: number | undefined; depth?: number | undefined; waterConditions: WaterConditions; spatialContext: SpatialContext; temporalContext: TemporalContext; socialContext: SocialContext; }' is not assignable to type 'EnvironmentalSignal'.
  Types of property 'temperature' are incompatible.
    Type 'number | undefined' is not assignable to type 'number'.
      Type 'undefined' is not assignable to type 'number'.
    379 |         const currentContext = this.processor.getSignalHistory().slice(-1)[0]?.environmentalContext;
    380 |         if (currentContext) {
  > 381 |             const updatedSignal: EnvironmentalSignal = {
        |                   ^^^^^^^^^^^^^
    382 |                 ...currentContext,
    383 |                 ...change,
    384 |                 timestamp: new Date()
ERROR in src/services/PredictiveRecommendationService.ts:299:68
TS2554: Expected 0 arguments, but got 1.
    297 |
    298 |   private analyzeHistoricalPatterns(recommendation: any, context: PredictiveContext): any {
  > 299 |     const patterns = this.historicalAnalysisService.detectPatterns(context.historicalTrends);
        |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^
    300 |     return patterns.filter(pattern => 
    301 |       this.isPatternRelevant()
    302 |     );
ERROR in src/services/securityUtils.ts:35:40
TS2802: Type 'Uint8Array' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    33 |     result.set(encryptedArray, iv.length);
    34 |
  > 35 |     return btoa(String.fromCharCode(...result));
       |                                        ^^^^^^
    36 |   } catch (err) {
    37 |     error('Encryption failed:', err);
    38 |     throw new Error('Failed to encrypt data');
ERROR in src/services/StewardAssessmentService.ts:46:15
TS2739: Type '{ timestamp: Date; interactionType: InteractionType; emotionalTone: EmotionalTone; feedbackScore: number; feedbackNotes: string; whaleResponse: WhaleResponse; }' is missing the following properties from type 'StewardFeedback': environmentalContext, socialContext, emotionalContext, improvementAreas
    44 |         );
    45 |
  > 46 |         const feedback: StewardFeedback = {
       |               ^^^^^^^^
    47 |             timestamp: new Date(),
    48 |             interactionType,
    49 |             emotionalTone,
ERROR in src/services/StewardAssessmentService.ts:181:15
TS2740: Type '{ averageEmotionalIntelligence: number; averageCulturalSensitivity: number; averageCommunicationEffectiveness: number; averageAdaptability: number; successRate: number; improvementRate: number; whaleEngagementScore: number; }' is missing the following properties from type 'StewardPerformanceMetrics': averageEmpathy, averagePatience, averageClarity, environmentalAdaptationScore, and 3 more.
    179 |         const recentFeedback = feedbackHistory.slice(-10); // Consider last 10 interactions
    180 |
  > 181 |         const metrics: StewardPerformanceMetrics = {
        |               ^^^^^^^
    182 |             averageEmotionalIntelligence: this.calculateAverage(recentFeedback.map(f => f.feedbackScore)),
    183 |             averageCulturalSensitivity: assessment.culturalSensitivity,
    184 |             averageCommunicationEffectiveness: assessment.communicationEffectiveness,
ERROR in src/services/StewardAssessmentService.ts:229:19
TS2740: Type '{ stewardID: string; emotionalIntelligence: number; culturalSensitivity: number; communicationEffectiveness: number; adaptability: number; feedbackHistory: never[]; lastUpdated: Date; }' is missing the following properties from type 'StewardAssessment': empathy, patience, clarity, environmentalContext, and 2 more.
    227 |     private getStewardAssessment(stewardID: string): StewardAssessment {
    228 |         if (!this.stewardAssessments.has(stewardID)) {
  > 229 |             const newAssessment: StewardAssessment = {
        |                   ^^^^^^^^^^^^^
    230 |                 stewardID,
    231 |                 emotionalIntelligence: 50,
    232 |                 culturalSensitivity: 50,
ERROR in src/services/StewardAssessmentService.ts:248:19
TS2739: Type '{ emotionalIntelligence: number; culturalSensitivity: number; communicationEffectiveness: number; adaptability: number; languageProficiency: {}; specializations: never[]; }' is missing the following properties from type 'StewardCapabilities': empathy, patience, clarity
    246 |     private getStewardCapabilities(stewardID: string): StewardCapabilities {
    247 |         if (!this.stewardCapabilities.has(stewardID)) {
  > 248 |             const newCapabilities: StewardCapabilities = {
        |                   ^^^^^^^^^^^^^^^
    249 |                 emotionalIntelligence: 50,
    250 |                 culturalSensitivity: 50,
    251 |                 communicationEffectiveness: 50,
ERROR in src/services/TemporalEditionService.ts:2:10
TS2614: Module '"../logger"' has no exported member 'logger'. Did you mean to use 'import logger from "../logger"' instead?
    1 | import { EventEmitter } from 'events';
  > 2 | import { logger } from '../logger';
      |          ^^^^^^
    3 | import { MonitoringService } from '../MonitoringService';
    4 | import { RiddlerExplorerService, Steward } from './RiddlerExplorerService';
    5 |
ERROR in src/services/TemporalEditionService.ts:39:36
TS2339: Property 'initialize' does not exist on type 'MonitoringService'.
    37 |     try {
    38 |       logger.info('Initializing Temporal Edition Service...');
  > 39 |       await this.monitoringService.initialize();
       |                                    ^^^^^^^^^^
    40 |       this.setupReportScheduling();
    41 |       this.isInitialized = true;
    42 |       logger.info('Temporal Edition Service initialized successfully');
ERROR in src/services/TemporalEditionService.ts:69:52
TS2339: Property 'getSystemMetrics' does not exist on type 'MonitoringService'.
    67 |     try {
    68 |       logger.info('Generating temporal reports...');
  > 69 |       const metrics = await this.monitoringService.getSystemMetrics();
       |                                                    ^^^^^^^^^^^^^^^^
    70 |       const reportData = {
    71 |         timestamp: Date.now(),
    72 |         metrics,
ERROR in src/services/TemporalMonitoringService.ts:128:42
TS2802: Type 'IterableIterator<[string, TemporalDataPoint[]]>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    126 |
    127 |     private async performTemporalAnalysis(): Promise<void> {
  > 128 |         for (const [systemId, points] of this.dataPoints.entries()) {
        |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
    129 |             if (points.length < 2) continue;
    130 |
    131 |             const analysis = this.analyzeTemporalData(systemId, points);
ERROR in src/services/WhaleSignalFeedbackLoop.ts:195:21
TS2339: Property 'environmentalContext' does not exist on type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    193 |
    194 |     private processContextualFeedback(context: NonNullable<TranslationResult['context']>): void {
  > 195 |         if (context.environmentalContext) {
        |                     ^^^^^^^^^^^^^^^^^^^^
    196 |             console.log('Processing environmental feedback:', context.environmentalContext);
    197 |         }
    198 |         if (context.emotionalContext) {
ERROR in src/services/WhaleSignalFeedbackLoop.ts:196:71
TS2339: Property 'environmentalContext' does not exist on type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    194 |     private processContextualFeedback(context: NonNullable<TranslationResult['context']>): void {
    195 |         if (context.environmentalContext) {
  > 196 |             console.log('Processing environmental feedback:', context.environmentalContext);
        |                                                                       ^^^^^^^^^^^^^^^^^^^^
    197 |         }
    198 |         if (context.emotionalContext) {
    199 |             console.log('Processing emotional feedback:', context.emotionalContext);
ERROR in src/services/WhaleSignalFeedbackLoop.ts:198:21
TS2339: Property 'emotionalContext' does not exist on type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    196 |             console.log('Processing environmental feedback:', context.environmentalContext);
    197 |         }
  > 198 |         if (context.emotionalContext) {
        |                     ^^^^^^^^^^^^^^^^
    199 |             console.log('Processing emotional feedback:', context.emotionalContext);
    200 |         }
    201 |         if (context.socialContext) {
ERROR in src/services/WhaleSignalFeedbackLoop.ts:199:67
TS2339: Property 'emotionalContext' does not exist on type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    197 |         }
    198 |         if (context.emotionalContext) {
  > 199 |             console.log('Processing emotional feedback:', context.emotionalContext);
        |                                                                   ^^^^^^^^^^^^^^^^
    200 |         }
    201 |         if (context.socialContext) {
    202 |             console.log('Processing social feedback:', context.socialContext);
ERROR in src/services/WhaleSignalFeedbackLoop.ts:201:21
TS2339: Property 'socialContext' does not exist on type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    199 |             console.log('Processing emotional feedback:', context.emotionalContext);
    200 |         }
  > 201 |         if (context.socialContext) {
        |                     ^^^^^^^^^^^^^
    202 |             console.log('Processing social feedback:', context.socialContext);
    203 |         }
    204 |     }
ERROR in src/services/WhaleSignalFeedbackLoop.ts:202:64
TS2339: Property 'socialContext' does not exist on type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    200 |         }
    201 |         if (context.socialContext) {
  > 202 |             console.log('Processing social feedback:', context.socialContext);
        |                                                                ^^^^^^^^^^^^^
    203 |         }
    204 |     }
    205 |
ERROR in src/services/WhaleSignalProcessing.ts:66:61
TS2339: Property 'integrateWithWhaleSignal' does not exist on type 'EnvironmentalDataIntegrator'.
    64 |     // Add a whale signal, integrating environmental context
    65 |     addWhaleSignal(signal: WhaleSignal): void {
  > 66 |         const enrichedSignal = this.environmentalIntegrator.integrateWithWhaleSignal(signal);
       |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^
    67 |         this.signalHistory.push(enrichedSignal);
    68 |         this.updateAdaptiveThresholds(enrichedSignal);
    69 |     }
ERROR in src/services/WhaleSignalProcessing.ts:73:38
TS2339: Property 'addEnvironmentalSignal' does not exist on type 'EnvironmentalDataIntegrator'.
    71 |     // Add an environmental signal
    72 |     addEnvironmentalSignal(signal: EnvironmentalSignal): void {
  > 73 |         this.environmentalIntegrator.addEnvironmentalSignal(signal);
       |                                      ^^^^^^^^^^^^^^^^^^^^^^
    74 |     }
    75 |
    76 |     // Update adaptive thresholds based on environmental context
ERROR in src/services/WhaleSignalProcessing.ts:79:20
TS2339: Property 'temperature' does not exist on type 'WhaleSignal'.
    77 |     private updateAdaptiveThresholds(signal: WhaleSignal): void {
    78 |         // Example: adapt vocalization frequency threshold based on temperature
  > 79 |         if (signal.temperature !== undefined) {
       |                    ^^^^^^^^^^^
    80 |             this.adaptiveThresholds['frequency'] = 20 + (signal.temperature - 10) * 0.5;
    81 |         }
    82 |         // Example: adapt migration speed threshold based on currentSpeed
ERROR in src/services/WhaleSignalProcessing.ts:80:65
TS2339: Property 'temperature' does not exist on type 'WhaleSignal'.
    78 |         // Example: adapt vocalization frequency threshold based on temperature
    79 |         if (signal.temperature !== undefined) {
  > 80 |             this.adaptiveThresholds['frequency'] = 20 + (signal.temperature - 10) * 0.5;
       |                                                                 ^^^^^^^^^^^
    81 |         }
    82 |         // Example: adapt migration speed threshold based on currentSpeed
    83 |         if (signal.currentSpeed !== undefined) {
ERROR in src/services/WhaleSignalProcessing.ts:83:20
TS2339: Property 'currentSpeed' does not exist on type 'WhaleSignal'.
    81 |         }
    82 |         // Example: adapt migration speed threshold based on currentSpeed
  > 83 |         if (signal.currentSpeed !== undefined) {
       |                    ^^^^^^^^^^^^
    84 |             this.adaptiveThresholds['migrationSpeed'] = 5 + signal.currentSpeed * 0.8;
    85 |         }
    86 |         // Add more adaptive logic as needed
ERROR in src/services/WhaleSignalProcessing.ts:84:68
TS2339: Property 'currentSpeed' does not exist on type 'WhaleSignal'.
    82 |         // Example: adapt migration speed threshold based on currentSpeed
    83 |         if (signal.currentSpeed !== undefined) {
  > 84 |             this.adaptiveThresholds['migrationSpeed'] = 5 + signal.currentSpeed * 0.8;
       |                                                                    ^^^^^^^^^^^^
    85 |         }
    86 |         // Add more adaptive logic as needed
    87 |     }
ERROR in src/services/WhaleSignalProcessing.ts:113:73
TS2339: Property 'behaviorType' does not exist on type 'WhaleSignal'.
    111 |         }
    112 |         // Simple Bayesian prediction: average of recent behavior types
  > 113 |         const recentBehaviors = this.signalHistory.slice(-5).map(s => s.behaviorType ?? 'unknown');
        |                                                                         ^^^^^^^^^^^^
    114 |         const behaviorCounts: { [key: string]: number } = {};
    115 |         recentBehaviors.forEach(b => {
    116 |             behaviorCounts[b] = (behaviorCounts[b] || 0) + 1;
ERROR in src/services/WhaleSignalProcessing.ts:153:13
TS2322: Type '{ type: "farewell" | "temporary_leave" | "migration_start"; confidence: number; timestamp: number; details: { emotionalState: EmotionalTone; vocalPattern: string; behavioralCues: string[]; context: { ...; }; }; }' is not assignable to type 'FarewellSignal'.
  Object literal may only specify known properties, and 'confidence' does not exist in type 'FarewellSignal'.
    151 |         return {
    152 |             type: this.determineFarewellType(farewellPattern, emotionalState),
  > 153 |             confidence,
        |             ^^^^^^^^^^
    154 |             timestamp: Date.now(),
    155 |             details: {
    156 |                 emotionalState,
ERROR in src/services/WhaleSignalProcessing.ts:276:71
TS2339: Property 'context' does not exist on type 'WhaleSignal'.
    274 |
    275 |     private analyzeEnvironmentalContext(signal: WhaleSignal): number {
  > 276 |         const { waterTemperature, currentSpeed, visibility } = signal.context.environmental;
        |                                                                       ^^^^^^^
    277 |         
    278 |         // Environmental factors that might influence farewell behavior
    279 |         const temperatureFactor = waterTemperature > 20 ? 0.8 : 0.4;
ERROR in src/services/WhaleSignalProcessing.ts:287:49
TS2339: Property 'context' does not exist on type 'WhaleSignal'.
    285 |
    286 |     private analyzeSocialContext(signal: WhaleSignal): number {
  > 287 |         const { groupSize, proximity } = signal.context.social;
        |                                                 ^^^^^^^
    288 |         
    289 |         // Social factors that might influence farewell behavior
    290 |         const groupFactor = groupSize > 3 ? 0.7 : 0.4;
ERROR in src/services/WhaleStewardSystem.ts:35:41
TS2322: Type '"English"' is not assignable to type 'SupportedLanguage'.
    33 |     handleIncomingWhaleSignal(
    34 |         signal: WhaleVocalSignal | WhaleMovementPattern | WhaleEnvironmentalData,
  > 35 |         options: TranslationOptions = { targetLanguage: 'English' }
       |                                         ^^^^^^^^^^^^^^
    36 |     ): void {
    37 |         const translationResult = this.whaleTranslator.translateWhaleSignal(signal, options);
    38 |         console.log(`Received whale signal: ${translationResult.translatedText}`);
ERROR in src/services/WhaleStewardSystem.ts:40:52
TS2339: Property 'language' does not exist on type 'TranslationResult'.
    38 |         console.log(`Received whale signal: ${translationResult.translatedText}`);
    39 |         console.log(`Confidence: ${translationResult.confidence}`);
  > 40 |         console.log(`Language: ${translationResult.language}`);
       |                                                    ^^^^^^^^
    41 |
    42 |         if (translationResult.context) {
    43 |             console.log('Context:', translationResult.context);
ERROR in src/services/WhaleStewardSystem.ts:70:45
TS2339: Property 'language' does not exist on type 'TranslationResult'.
    68 |             impact: this.calculateImpact(translationResult),
    69 |             metadata: {
  > 70 |                 language: translationResult.language,
       |                                             ^^^^^^^^
    71 |                 timestamp: translationResult.timestamp,
    72 |                 context: translationResult.context
    73 |             },
ERROR in src/services/WhaleStewardSystem.ts:83:43
TS2339: Property 'environmentalContext' does not exist on type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    81 |         
    82 |         if (translationResult.context) {
  > 83 |             if (translationResult.context.environmentalContext) impact += 0.1;
       |                                           ^^^^^^^^^^^^^^^^^^^^
    84 |             if (translationResult.context.emotionalContext) impact += 0.1;
    85 |             if (translationResult.context.socialContext) impact += 0.1;
    86 |         }
ERROR in src/services/WhaleStewardSystem.ts:84:43
TS2339: Property 'emotionalContext' does not exist on type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    82 |         if (translationResult.context) {
    83 |             if (translationResult.context.environmentalContext) impact += 0.1;
  > 84 |             if (translationResult.context.emotionalContext) impact += 0.1;
       |                                           ^^^^^^^^^^^^^^^^
    85 |             if (translationResult.context.socialContext) impact += 0.1;
    86 |         }
    87 |
ERROR in src/services/WhaleStewardSystem.ts:85:43
TS2339: Property 'socialContext' does not exist on type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    83 |             if (translationResult.context.environmentalContext) impact += 0.1;
    84 |             if (translationResult.context.emotionalContext) impact += 0.1;
  > 85 |             if (translationResult.context.socialContext) impact += 0.1;
       |                                           ^^^^^^^^^^^^^
    86 |         }
    87 |
    88 |         return Math.min(Math.max(impact, 0), 1);
ERROR in src/services/WhaleSupreme.ts:170:18
TS2551: Property 'logDecision' does not exist on type 'WhaleSupreme'. Did you mean 'decisions'?
    168 |             this.executeCommand(command);
    169 |             this.decreasePower();
  > 170 |             this.logDecision('issueCommand', command);
        |                  ^^^^^^^^^^^
    171 |         } else {
    172 |             throw new Error('Command rejected due to ethical or ecological concerns');
    173 |         }
ERROR in src/services/WhaleSupreme.ts:197:18
TS2551: Property 'logDecision' does not exist on type 'WhaleSupreme'. Did you mean 'decisions'?
    195 |             this.executeOverride(system);
    196 |             this.decreasePower();
  > 197 |             this.logDecision('overrideSystem', `${system} overridden. Reason: ${reason}`);
        |                  ^^^^^^^^^^^
    198 |         } else {
    199 |             throw new Error('Override rejected due to ethical or ecological concerns');
    200 |         }
ERROR in src/services/WhaleSupreme.ts:224:18
TS2551: Property 'logDecision' does not exist on type 'WhaleSupreme'. Did you mean 'decisions'?
    222 |             this.processGuidance(guidance);
    223 |             this.decreasePower();
  > 224 |             this.logDecision('provideGuidance', guidance);
        |                  ^^^^^^^^^^^
    225 |         } else {
    226 |             throw new Error('Guidance rejected due to ethical or ecological concerns');
    227 |         }
ERROR in src/services/WhaleSupreme.ts:251:18
TS2551: Property 'logDecision' does not exist on type 'WhaleSupreme'. Did you mean 'decisions'?
    249 |             this.executeEnvoyAction(action);
    250 |             this.decreasePower();
  > 251 |             this.logDecision('actAsEnvoy', action);
        |                  ^^^^^^^^^^^
    252 |         } else {
    253 |             throw new Error('Envoy action rejected due to ethical or ecological concerns');
    254 |         }
ERROR in src/services/WhaleSupreme.ts:279:18
TS2551: Property 'logDecision' does not exist on type 'WhaleSupreme'. Did you mean 'decisions'?
    277 |             this.executeConflictResolution(conflict, resolution);
    278 |             this.decreasePower();
  > 279 |             this.logDecision('resolveConflict', `${conflict} resolved as ${resolution}`);
        |                  ^^^^^^^^^^^
    280 |         } else {
    281 |             throw new Error('Conflict resolution rejected due to ethical or ecological concerns');
    282 |         }
ERROR in src/services/WhaleSupremeMonitoring.ts:59:42
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    57 |
    58 |     private updatePowerMetrics(): void {
  > 59 |         const status = this.whaleSupreme.getStatus();
       |                                          ^^^^^^^^^
    60 |         const envData = this.poseidon.getEnvironmentalData();
    61 |
    62 |         const powerMetrics: PowerMetrics = {
ERROR in src/services/WhaleSupremeMonitoring.ts:60:39
TS2551: Property 'getEnvironmentalData' does not exist on type 'PoseidonSystem'. Did you mean 'provideEnvironmentalData'?
    58 |     private updatePowerMetrics(): void {
    59 |         const status = this.whaleSupreme.getStatus();
  > 60 |         const envData = this.poseidon.getEnvironmentalData();
       |                                       ^^^^^^^^^^^^^^^^^^^^
    61 |
    62 |         const powerMetrics: PowerMetrics = {
    63 |             timestamp: new Date(),
ERROR in src/services/WhaleSupremeMonitoring.ts:97:42
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
     95 |
     96 |     private checkThresholds(): void {
  >  97 |         const status = this.whaleSupreme.getStatus();
        |                                          ^^^^^^^^^
     98 |         
     99 |         // Check power thresholds
    100 |         if (status.powerLevel < this.POWER_THRESHOLD_LOW) {
ERROR in src/services/WhaleTranslationTool.ts:25:9
TS2322: Type '{ whale_call_1: string; whale_call_2: string; whale_call_3: string; whale_call_4: string; whale_call_5: string; }' is not assignable to type 'VocabularyMapping'.
  Object literal may only specify known properties, and 'whale_call_1' does not exist in type 'VocabularyMapping'.
    23 |
    24 |     private vocabularyMapping: VocabularyMapping = {
  > 25 |         whale_call_1: "Human communication system is aware of your call.",
       |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    26 |         whale_call_2: "Translation system initiated.",
    27 |         whale_call_3: "Understanding of human vocalizations initiated.",
    28 |         whale_call_4: "Environmental change detected, initiating system response.",
ERROR in src/services/WhaleTranslationTool.ts:33:9
TS2322: Type '"English"' is not assignable to type 'SupportedLanguage'.
    31 |
    32 |     private supportedLanguages: SupportedLanguage[] = [
  > 33 |         'English',
       |         ^^^^^^^^^
    34 |         'Spanish',
    35 |         'French',
    36 |         'German',
ERROR in src/services/WhaleTranslationTool.ts:34:9
TS2322: Type '"Spanish"' is not assignable to type 'SupportedLanguage'.
    32 |     private supportedLanguages: SupportedLanguage[] = [
    33 |         'English',
  > 34 |         'Spanish',
       |         ^^^^^^^^^
    35 |         'French',
    36 |         'German',
    37 |         'Chinese',
ERROR in src/services/WhaleTranslationTool.ts:35:9
TS2322: Type '"French"' is not assignable to type 'SupportedLanguage'.
    33 |         'English',
    34 |         'Spanish',
  > 35 |         'French',
       |         ^^^^^^^^
    36 |         'German',
    37 |         'Chinese',
    38 |         'Japanese',
ERROR in src/services/WhaleTranslationTool.ts:36:9
TS2322: Type '"German"' is not assignable to type 'SupportedLanguage'.
    34 |         'Spanish',
    35 |         'French',
  > 36 |         'German',
       |         ^^^^^^^^
    37 |         'Chinese',
    38 |         'Japanese',
    39 |         'Portuguese',
ERROR in src/services/WhaleTranslationTool.ts:37:9
TS2322: Type '"Chinese"' is not assignable to type 'SupportedLanguage'.
    35 |         'French',
    36 |         'German',
  > 37 |         'Chinese',
       |         ^^^^^^^^^
    38 |         'Japanese',
    39 |         'Portuguese',
    40 |         'Russian'
ERROR in src/services/WhaleTranslationTool.ts:38:9
TS2322: Type '"Japanese"' is not assignable to type 'SupportedLanguage'.
    36 |         'German',
    37 |         'Chinese',
  > 38 |         'Japanese',
       |         ^^^^^^^^^^
    39 |         'Portuguese',
    40 |         'Russian'
    41 |     ];
ERROR in src/services/WhaleTranslationTool.ts:39:9
TS2322: Type '"Portuguese"' is not assignable to type 'SupportedLanguage'.
    37 |         'Chinese',
    38 |         'Japanese',
  > 39 |         'Portuguese',
       |         ^^^^^^^^^^^^
    40 |         'Russian'
    41 |     ];
    42 |
ERROR in src/services/WhaleTranslationTool.ts:40:9
TS2322: Type '"Russian"' is not assignable to type 'SupportedLanguage'.
    38 |         'Japanese',
    39 |         'Portuguese',
  > 40 |         'Russian'
       |         ^^^^^^^^^
    41 |     ];
    42 |
    43 |     // Translate any type of whale signal into a standardized format
ERROR in src/services/WhaleTranslationTool.ts:46:41
TS2322: Type '"English"' is not assignable to type 'SupportedLanguage'.
    44 |     translateWhaleSignal(
    45 |         signal: WhaleVocalSignal | WhaleMovementPattern | WhaleEnvironmentalData,
  > 46 |         options: TranslationOptions = { targetLanguage: 'English' }
       |                                         ^^^^^^^^^^^^^^
    47 |     ): TranslationResult {
    48 |         const translatedSignal = this.translateSignal(signal);
    49 |         const confidence = this.calculateConfidence(translatedSignal);
ERROR in src/services/WhaleTranslationTool.ts:62:13
TS2322: Type '{ environmentalContext: string; emotionalContext: string; socialContext: string; spiritualContext: string; } | undefined' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
  Type 'undefined' is not assignable to type '{ environmental: string[]; social: string[]; emotional: string[]; }'.
    60 |             timestamp: new Date(),
    61 |             emotionalTone: vocabularyEntry.emotionalTone,
  > 62 |             context: options.includeContext ? this.extractContext(signal, vocabularyEntry) : undefined
       |             ^^^^^^^
    63 |         };
    64 |     }
    65 |
ERROR in src/services/WhaleTranslationTool.ts:85:9
TS2322: Type '"neutral"' is not assignable to type 'EmotionalTone'.
    83 |             }
    84 |         }
  > 85 |         return 'neutral';
       |         ^^^^^^^^^^^^^^^^^
    86 |     }
    87 |
    88 |     private getVocabularyEntry(
ERROR in src/services/WhaleTranslationTool.ts:119:21
TS2339: Property 'emotionalState' does not exist on type 'TranslationOptions'.
    117 |
    118 |         // Adjust based on emotional state if provided
  > 119 |         if (options.emotionalState) {
        |                     ^^^^^^^^^^^^^^
    120 |             adjustedMessage = this.adjustForEmotionalState(adjustedMessage, options.emotionalState);
    121 |         }
    122 |
ERROR in src/services/WhaleTranslationTool.ts:120:85
TS2339: Property 'emotionalState' does not exist on type 'TranslationOptions'.
    118 |         // Adjust based on emotional state if provided
    119 |         if (options.emotionalState) {
  > 120 |             adjustedMessage = this.adjustForEmotionalState(adjustedMessage, options.emotionalState);
        |                                                                                     ^^^^^^^^^^^^^^
    121 |         }
    122 |
    123 |         // Adjust based on environmental context if provided
ERROR in src/services/WhaleTranslationTool.ts:124:21
TS2339: Property 'environmentalContext' does not exist on type 'TranslationOptions'.
    122 |
    123 |         // Adjust based on environmental context if provided
  > 124 |         if (options.environmentalContext) {
        |                     ^^^^^^^^^^^^^^^^^^^^
    125 |             adjustedMessage = this.adjustForEnvironmentalContext(adjustedMessage, options.environmentalContext);
    126 |         }
    127 |
ERROR in src/services/WhaleTranslationTool.ts:125:91
TS2339: Property 'environmentalContext' does not exist on type 'TranslationOptions'.
    123 |         // Adjust based on environmental context if provided
    124 |         if (options.environmentalContext) {
  > 125 |             adjustedMessage = this.adjustForEnvironmentalContext(adjustedMessage, options.environmentalContext);
        |                                                                                           ^^^^^^^^^^^^^^^^^^^^
    126 |         }
    127 |
    128 |         return adjustedMessage;
ERROR in src/tests/DjinnCouncilServiceStandaloneTest.ts:5:7
TS2741: Property 'peckingTier' is missing in type '{ id: string; type: "human"; name: string; status: "pending"; lastRecognized: null; }' but required in type 'Steward'.
    3 |
    4 | // Test stewards
  > 5 | const humanSteward: Steward = { id: 'human1', type: 'human', name: 'Alice', status: 'pending', lastRecognized: null };
      |       ^^^^^^^^^^^^
    6 | const aiSteward: Steward = { id: 'ai1', type: 'ai', name: 'DjinnAI', status: 'pending', lastRecognized: null };
    7 | const whaleSteward: Steward = { id: 'whale1', type: 'whale', name: 'WhaleSong', status: 'pending', lastRecognized: null };
    8 | const nonSteward: Steward = { id: 'bot1', type: 'non-steward', name: 'TrackerBot', status: 'pending', lastRecognized: null };
ERROR in src/tests/DjinnCouncilServiceStandaloneTest.ts:6:7
TS2741: Property 'peckingTier' is missing in type '{ id: string; type: "ai"; name: string; status: "pending"; lastRecognized: null; }' but required in type 'Steward'.
    4 | // Test stewards
    5 | const humanSteward: Steward = { id: 'human1', type: 'human', name: 'Alice', status: 'pending', lastRecognized: null };
  > 6 | const aiSteward: Steward = { id: 'ai1', type: 'ai', name: 'DjinnAI', status: 'pending', lastRecognized: null };
      |       ^^^^^^^^^
    7 | const whaleSteward: Steward = { id: 'whale1', type: 'whale', name: 'WhaleSong', status: 'pending', lastRecognized: null };
    8 | const nonSteward: Steward = { id: 'bot1', type: 'non-steward', name: 'TrackerBot', status: 'pending', lastRecognized: null };
    9 |
ERROR in src/tests/DjinnCouncilServiceStandaloneTest.ts:7:7
TS2741: Property 'peckingTier' is missing in type '{ id: string; type: "whale"; name: string; status: "pending"; lastRecognized: null; }' but required in type 'Steward'.
     5 | const humanSteward: Steward = { id: 'human1', type: 'human', name: 'Alice', status: 'pending', lastRecognized: null };
     6 | const aiSteward: Steward = { id: 'ai1', type: 'ai', name: 'DjinnAI', status: 'pending', lastRecognized: null };
  >  7 | const whaleSteward: Steward = { id: 'whale1', type: 'whale', name: 'WhaleSong', status: 'pending', lastRecognized: null };
       |       ^^^^^^^^^^^^
     8 | const nonSteward: Steward = { id: 'bot1', type: 'non-steward', name: 'TrackerBot', status: 'pending', lastRecognized: null };
     9 |
    10 | // Instantiate RiddlerExplorerService and DjinnCouncilService
ERROR in src/tests/DjinnCouncilServiceStandaloneTest.ts:8:7
TS2741: Property 'peckingTier' is missing in type '{ id: string; type: "non-steward"; name: string; status: "pending"; lastRecognized: null; }' but required in type 'Steward'.
     6 | const aiSteward: Steward = { id: 'ai1', type: 'ai', name: 'DjinnAI', status: 'pending', lastRecognized: null };
     7 | const whaleSteward: Steward = { id: 'whale1', type: 'whale', name: 'WhaleSong', status: 'pending', lastRecognized: null };
  >  8 | const nonSteward: Steward = { id: 'bot1', type: 'non-steward', name: 'TrackerBot', status: 'pending', lastRecognized: null };
       |       ^^^^^^^^^^
     9 |
    10 | // Instantiate RiddlerExplorerService and DjinnCouncilService
    11 | const riddler = new RiddlerExplorerService();
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:44:39
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    42 |         // Process the signal
    43 |         whaleSteward.handleIncomingWhaleSignal(signal);
  > 44 |         const analysis = whaleSteward.analyzeWhaleData();
       |                                       ^^^^^^^^^^^^^^^^
    45 |         expect(analysis).toBeDefined();
    46 |         expect(analysis.signalType).toBeDefined();
    47 |
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:81:43
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    79 |         for (const signal of signals) {
    80 |             whaleSteward.handleIncomingWhaleSignal(signal);
  > 81 |             const analysis = whaleSteward.analyzeWhaleData();
       |                                           ^^^^^^^^^^^^^^^^
    82 |             const update = await poseidonSystem.processWhaleAnalysis(analysis);
    83 |             expect(update.status).toBe('success');
    84 |         }
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:103:43
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    101 |         for (const signal of signals) {
    102 |             whaleSteward.handleIncomingWhaleSignal(signal);
  > 103 |             const analysis = whaleSteward.analyzeWhaleData();
        |                                           ^^^^^^^^^^^^^^^^
    104 |             const update = await poseidonSystem.processWhaleAnalysis(analysis);
    105 |             expect(update.status).toBe('success');
    106 |         }
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:122:39
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    120 |
    121 |         whaleSteward.handleIncomingWhaleSignal(signal);
  > 122 |         const analysis = whaleSteward.analyzeWhaleData();
        |                                       ^^^^^^^^^^^^^^^^
    123 |         const update = await poseidonSystem.processWhaleAnalysis(analysis);
    124 |         expect(update.status).toBe('success');
    125 |         expect(update.ecosystemChanges.environmentalAdjustments).toBeDefined();
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:159:43
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    157 |         for (const signal of signals) {
    158 |             whaleSteward.handleIncomingWhaleSignal(signal);
  > 159 |             const analysis = whaleSteward.analyzeWhaleData();
        |                                           ^^^^^^^^^^^^^^^^
    160 |             const update = await poseidonSystem.processWhaleAnalysis(analysis);
    161 |             expect(update.status).toBe('success');
    162 |         }
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:187:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    185 |             for (const signal of signals) {
    186 |                 whaleSteward.handleIncomingWhaleSignal(signal);
  > 187 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    188 |                 const update = await poseidonSystem.processWhaleAnalysis(analysis);
    189 |                 expect(update.status).toBe('success');
    190 |             }
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:239:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    237 |             for (const signal of signals) {
    238 |                 whaleSteward.handleIncomingWhaleSignal(signal);
  > 239 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    240 |                 const update = await poseidonSystem.processWhaleAnalysis(analysis);
    241 |                 expect(update.status).toBe('success');
    242 |             }
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:283:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    281 |             for (const scenario of extremeScenarios) {
    282 |                 whaleSteward.handleIncomingWhaleSignal(scenario);
  > 283 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    284 |                 const update = await poseidonSystem.processWhaleAnalysis(analysis);
    285 |                 expect(update.status).toBe('success');
    286 |                 expect(update.ecosystemChanges.environmentalAdjustments).toBeDefined();
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:306:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    304 |             for (const change of temperatureChanges) {
    305 |                 whaleSteward.handleIncomingWhaleSignal(change);
  > 306 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    307 |                 const update = await poseidonSystem.processWhaleAnalysis(analysis);
    308 |                 expect(update.status).toBe('success');
    309 |             }
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:348:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    346 |             await Promise.all(signals.map(async (signal) => {
    347 |                 whaleSteward.handleIncomingWhaleSignal(signal);
  > 348 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    349 |                 const update = await poseidonSystem.processWhaleAnalysis(analysis);
    350 |                 expect(update.status).toBe('success');
    351 |             }));
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:376:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    374 |             for (const signal of signals) {
    375 |                 whaleSteward.handleIncomingWhaleSignal(signal);
  > 376 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    377 |                 await poseidonSystem.processWhaleAnalysis(analysis);
    378 |             }
    379 |
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:397:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    395 |             for (const pattern of patterns) {
    396 |                 whaleSteward.handleIncomingWhaleSignal(pattern);
  > 397 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    398 |                 await poseidonSystem.processWhaleAnalysis(analysis);
    399 |             }
    400 |
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:420:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    418 |             for (const signal of signals) {
    419 |                 whaleSteward.handleIncomingWhaleSignal(signal);
  > 420 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    421 |                 await poseidonSystem.processWhaleAnalysis(analysis);
    422 |             }
    423 |             const endTime = Date.now();
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:443:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    441 |             for (const change of changes) {
    442 |                 whaleSteward.handleIncomingWhaleSignal(change);
  > 443 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    444 |                 await poseidonSystem.processWhaleAnalysis(analysis);
    445 |             }
    446 |
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:459:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    457 |             for (const signal of validSignals) {
    458 |                 whaleSteward.handleIncomingWhaleSignal(signal);
  > 459 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    460 |                 await poseidonSystem.processWhaleAnalysis(analysis);
    461 |             }
    462 |
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:476:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    474 |             for (const signal of recoverySignals) {
    475 |                 whaleSteward.handleIncomingWhaleSignal(signal);
  > 476 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    477 |                 const update = await poseidonSystem.processWhaleAnalysis(analysis);
    478 |                 expect(update.status).toBe('success');
    479 |             }
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:493:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    491 |                 const signal = signals[i];
    492 |                 whaleSteward.handleIncomingWhaleSignal(signal);
  > 493 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    494 |                 const update = await poseidonSystem.processWhaleAnalysis(analysis);
    495 |                 expect(update.status).toBe('success');
    496 |
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:524:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    522 |             for (const signal of signals) {
    523 |                 whaleSteward.handleIncomingWhaleSignal(signal);
  > 524 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    525 |                 await poseidonSystem.processWhaleAnalysis(analysis);
    526 |             }
    527 |
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:542:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    540 |                 whaleSteward.handleIncomingWhaleSignal(environmental[i]);
    541 |
  > 542 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    543 |                 await poseidonSystem.processWhaleAnalysis(analysis);
    544 |             }
    545 |
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:558:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    556 |             for (const change of environmental) {
    557 |                 whaleSteward.handleIncomingWhaleSignal(change);
  > 558 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    559 |                 await poseidonSystem.processWhaleAnalysis(analysis);
    560 |             }
    561 |
ERROR in src/tests/integration/PoseidonMermaidIntegration.test.ts:573:47
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    571 |             for (const pattern of movement) {
    572 |                 whaleSteward.handleIncomingWhaleSignal(pattern);
  > 573 |                 const analysis = whaleSteward.analyzeWhaleData();
        |                                               ^^^^^^^^^^^^^^^^
    574 |                 await poseidonSystem.processWhaleAnalysis(analysis);
    575 |             }
    576 |             const endTime = Date.now();
ERROR in src/tests/integration/PoseidonWhaleSignal.integration.test.ts:27:13
TS2322: Type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    25 |         // Add a whale signal to trigger threshold update
    26 |         const whaleSignal: WhaleSignal = {
  > 27 |             signalType: 'vocal',
       |             ^^^^^^^^^^^^^^^^^^^
    28 |             timestamp: new Date(),
    29 |             frequency: 20
    30 |         };
ERROR in src/tests/integration/PoseidonWhaleSignal.integration.test.ts:45:36
TS2345: Argument of type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to parameter of type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    43 |         };
    44 |         poseidon.provideEnvironmentalData(initialEnv);
  > 45 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 20 });
       |                                    ^^^^^^^^^^^^^^^^^^^
    46 |         let thresholds = processor.getAdaptiveThresholds();
    47 |         const initialFreqThreshold = thresholds.frequency;
    48 |
ERROR in src/tests/integration/PoseidonWhaleSignal.integration.test.ts:51:36
TS2345: Argument of type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to parameter of type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    49 |         // Simulate temperature increase
    50 |         poseidon.provideEnvironmentalData({ ...initialEnv, temperature: 20, timestamp: new Date() });
  > 51 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 20 });
       |                                    ^^^^^^^^^^^^^^^^^^^
    52 |         thresholds = processor.getAdaptiveThresholds();
    53 |         expect(thresholds.frequency).toBeGreaterThan(initialFreqThreshold);
    54 |     });
ERROR in src/tests/integration/PoseidonWhaleSignal.integration.test.ts:64:36
TS2345: Argument of type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to parameter of type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    62 |         };
    63 |         poseidon.provideEnvironmentalData(envSignal);
  > 64 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 15 });
       |                                    ^^^^^^^^^^^^^^^^^^^
    65 |         // No direct salinity effect in current logic, but test for extensibility
    66 |         // Add logic here if salinity is used in adaptive thresholds
    67 |         expect(processor.getAdaptiveThresholds()).toBeDefined();
ERROR in src/tests/integration/PoseidonWhaleSignal.integration.test.ts:78:36
TS2345: Argument of type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to parameter of type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    76 |         };
    77 |         poseidon.provideEnvironmentalData(envSignal);
  > 78 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 10 });
       |                                    ^^^^^^^^^^^^^^^^^^^
    79 |         let thresholds = processor.getAdaptiveThresholds();
    80 |         const initialMigrationSpeed = thresholds.migrationSpeed;
    81 |
ERROR in src/tests/integration/PoseidonWhaleSignal.integration.test.ts:84:36
TS2345: Argument of type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to parameter of type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    82 |         // Simulate current speed increase
    83 |         poseidon.provideEnvironmentalData({ ...envSignal, currentSpeed: 3, timestamp: new Date() });
  > 84 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 10 });
       |                                    ^^^^^^^^^^^^^^^^^^^
    85 |         thresholds = processor.getAdaptiveThresholds();
    86 |         expect(thresholds.migrationSpeed).toBeGreaterThan(initialMigrationSpeed);
    87 |     });
ERROR in src/tests/integration/PoseidonWhaleSignal.integration.test.ts:92:36
TS2345: Argument of type '{ signalType: string; timestamp: Date; frequency: number; behaviorType: string; }' is not assignable to parameter of type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    90 |         // Provide environmental data and whale signals
    91 |         poseidon.provideEnvironmentalData({ timestamp: new Date(), temperature: 14, salinity: 33, currentSpeed: 2 });
  > 92 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 10, behaviorType: 'feeding' });
       |                                    ^^^^^^^^^^^^^^^^^^^
    93 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 20, behaviorType: 'migration' });
    94 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 30, behaviorType: 'feeding' });
    95 |
ERROR in src/tests/integration/PoseidonWhaleSignal.integration.test.ts:93:36
TS2345: Argument of type '{ signalType: string; timestamp: Date; frequency: number; behaviorType: string; }' is not assignable to parameter of type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    91 |         poseidon.provideEnvironmentalData({ timestamp: new Date(), temperature: 14, salinity: 33, currentSpeed: 2 });
    92 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 10, behaviorType: 'feeding' });
  > 93 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 20, behaviorType: 'migration' });
       |                                    ^^^^^^^^^^^^^^^^^^^
    94 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 30, behaviorType: 'feeding' });
    95 |
    96 |         // FFT should identify dominant frequencies
ERROR in src/tests/integration/PoseidonWhaleSignal.integration.test.ts:94:36
TS2345: Argument of type '{ signalType: string; timestamp: Date; frequency: number; behaviorType: string; }' is not assignable to parameter of type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    92 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 10, behaviorType: 'feeding' });
    93 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 20, behaviorType: 'migration' });
  > 94 |         processor.addWhaleSignal({ signalType: 'vocal', timestamp: new Date(), frequency: 30, behaviorType: 'feeding' });
       |                                    ^^^^^^^^^^^^^^^^^^^
    95 |
    96 |         // FFT should identify dominant frequencies
    97 |         const fftResult = processor.analyzePatternsWithFourier();
ERROR in src/tests/integration/setup.ts:28:26
TS2554: Expected 2 arguments, but got 0.
    26 |
    27 | export function createTestSystems(): TestSystems {
  > 28 |     const whaleSteward = new WhaleStewardSystem();
       |                          ^^^^^^^^^^^^^^^^^^^^^^^^
    29 |     const poseidonSystem = new PoseidonSystem();
    30 |     return { whaleSteward, poseidonSystem };
    31 | }
ERROR in src/tests/integration/setup.ts:29:28
TS2554: Expected 1 arguments, but got 0.
    27 | export function createTestSystems(): TestSystems {
    28 |     const whaleSteward = new WhaleStewardSystem();
  > 29 |     const poseidonSystem = new PoseidonSystem();
       |                            ^^^^^^^^^^^^^^^^^^^^
    30 |     return { whaleSteward, poseidonSystem };
    31 | }
    32 |
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:8:18
TS2554: Expected 2 arguments, but got 0.
     6 |
     7 |     beforeEach(() => {
  >  8 |         system = new WhaleStewardSystem();
       |                  ^^^^^^^^^^^^^^^^^^^^^^^^
     9 |     });
    10 |
    11 |     describe('End-to-End Signal Processing', () => {
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:28:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    26 |             const history = system.getSignalHistory();
    27 |             expect(history.length).toBe(1);
  > 28 |             expect(history[0].type).toBe('vocal');
       |                               ^^^^
    29 |             expect(history[0].content).toEqual(vocalSignal);
    30 |
    31 |             // Verify analysis
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:29:31
TS2551: Property 'content' does not exist on type 'TranslationResult'. Did you mean 'context'?
    27 |             expect(history.length).toBe(1);
    28 |             expect(history[0].type).toBe('vocal');
  > 29 |             expect(history[0].content).toEqual(vocalSignal);
       |                               ^^^^^^^
    30 |
    31 |             // Verify analysis
    32 |             const analysis = system.analyzeWhaleData();
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:32:37
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    30 |
    31 |             // Verify analysis
  > 32 |             const analysis = system.analyzeWhaleData();
       |                                     ^^^^^^^^^^^^^^^^
    33 |             expect(analysis).toBeDefined();
    34 |             expect(analysis.signalType).toBe('aggregate');
    35 |             expect(analysis.confidence).toBeGreaterThanOrEqual(0);
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:74:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    72 |             const history = system.getSignalHistory();
    73 |             expect(history.length).toBe(3);
  > 74 |             expect(history[0].type).toBe('vocal');
       |                               ^^^^
    75 |             expect(history[1].type).toBe('movement');
    76 |             expect(history[2].type).toBe('environmental');
    77 |
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:75:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    73 |             expect(history.length).toBe(3);
    74 |             expect(history[0].type).toBe('vocal');
  > 75 |             expect(history[1].type).toBe('movement');
       |                               ^^^^
    76 |             expect(history[2].type).toBe('environmental');
    77 |
    78 |             // Verify analysis
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:76:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    74 |             expect(history[0].type).toBe('vocal');
    75 |             expect(history[1].type).toBe('movement');
  > 76 |             expect(history[2].type).toBe('environmental');
       |                               ^^^^
    77 |
    78 |             // Verify analysis
    79 |             const analysis = system.analyzeWhaleData();
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:79:37
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    77 |
    78 |             // Verify analysis
  > 79 |             const analysis = system.analyzeWhaleData();
       |                                     ^^^^^^^^^^^^^^^^
    80 |             expect(analysis).toBeDefined();
    81 |             expect(analysis.metadata.pattern).toBeDefined();
    82 |         });
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:115:37
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    113 |
    114 |             // Verify pattern detection
  > 115 |             const analysis = system.analyzeWhaleData();
        |                                     ^^^^^^^^^^^^^^^^
    116 |             expect(analysis.metadata.pattern).toBeDefined();
    117 |             expect(analysis.metadata.prediction).toBeDefined();
    118 |         });
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:149:37
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    147 |
    148 |             // Verify environmental pattern detection
  > 149 |             const analysis = system.analyzeWhaleData();
        |                                     ^^^^^^^^^^^^^^^^
    150 |             expect(analysis.metadata.pattern).toBeDefined();
    151 |             expect(analysis.impact).toBeGreaterThan(0);
    152 |         });
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:196:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    194 |             const history = system.getSignalHistory();
    195 |             expect(history.length).toBe(1);
  > 196 |             expect(history[0].type).toBe('vocal');
        |                               ^^^^
    197 |         });
    198 |     });
    199 |
ERROR in src/tests/integration/WhaleSignalSystem.integration.test.ts:246:37
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    244 |
    245 |             // Verify pattern detection accuracy
  > 246 |             const analysis = system.analyzeWhaleData();
        |                                     ^^^^^^^^^^^^^^^^
    247 |             expect(analysis.metadata.pattern).toBeDefined();
    248 |             expect(analysis.confidence).toBeGreaterThan(0.5);
    249 |         });
ERROR in src/tests/integration/WhaleSleepSystem.integration.test.ts:36:44
TS2322: Type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    34 |     it('should not interfere with signal processing during sleep mode', () => {
    35 |         sleepSystem.activateSleepMode();
  > 36 |         const whaleSignal: WhaleSignal = { signalType: 'vocal', timestamp: new Date(), frequency: 20 };
       |                                            ^^^^^^^^^^^^^^^^^^^
    37 |         processor.addWhaleSignal(whaleSignal);
    38 |         const fftResult = processor.analyzePatternsWithFourier();
    39 |         expect(fftResult.dominantFrequencies.length).toBeGreaterThan(0);
ERROR in src/tests/integration/WhaleSleepSystem.integration.test.ts:45:44
TS2322: Type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    43 |         sleepSystem.activateSleepMode();
    44 |         sleepSystem.deactivateSleepMode();
  > 45 |         const whaleSignal: WhaleSignal = { signalType: 'vocal', timestamp: new Date(), frequency: 20 };
       |                                            ^^^^^^^^^^^^^^^^^^^
    46 |         processor.addWhaleSignal(whaleSignal);
    47 |         const fftResult = processor.analyzePatternsWithFourier();
    48 |         expect(fftResult.dominantFrequencies.length).toBeGreaterThan(0);
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:24:70
TS2345: Argument of type 'WhaleSignalProcessing' is not assignable to parameter of type 'PoseidonSystem'.
  Type 'WhaleSignalProcessing' is missing the following properties from type 'PoseidonSystem': processor, ecosystemStatus, ADAPTATION_THRESHOLD, STABILITY_THRESHOLD, and 29 more.
    22 |         poseidon = new PoseidonSystem(processor);
    23 |         whaleCommandSystem = new WhaleCommandSystem(poseidon, processor);
  > 24 |         sonarSystem = new SonarEnhancementSystem(whaleCommandSystem, processor);
       |                                                                      ^^^^^^^^^
    25 |         sleepSystem = new WhaleSleepSystem(poseidon, processor);
    26 |         whaleSupreme = new WhaleSupreme(poseidon, processor, sonarSystem, sleepSystem);
    27 |     });
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:26:24
TS2554: Expected 6 arguments, but got 4.
    24 |         sonarSystem = new SonarEnhancementSystem(whaleCommandSystem, processor);
    25 |         sleepSystem = new WhaleSleepSystem(poseidon, processor);
  > 26 |         whaleSupreme = new WhaleSupreme(poseidon, processor, sonarSystem, sleepSystem);
       |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    27 |     });
    28 |
    29 |     afterEach(() => {
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:30:22
TS2339: Property 'dispose' does not exist on type 'WhaleSupreme'.
    28 |
    29 |     afterEach(() => {
  > 30 |         whaleSupreme.dispose();
       |                      ^^^^^^^
    31 |     });
    32 |
    33 |     it('should maintain power level based on environmental conditions', () => {
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:42:37
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    40 |         poseidon.provideEnvironmentalData(envSignal);
    41 |         
  > 42 |         const status = whaleSupreme.getStatus();
       |                                     ^^^^^^^^^
    43 |         expect(status.powerLevel).toBeGreaterThan(0);
    44 |         expect(status.powerContext.environmentalStability).toBeGreaterThan(0.8);
    45 |     });
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:56:44
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    54 |         poseidon.provideEnvironmentalData(envSignal);
    55 |
  > 56 |         const initialStatus = whaleSupreme.getStatus();
       |                                            ^^^^^^^^^
    57 |         whaleSupreme.issueCommand('test_command', 'Testing command execution');
    58 |         const finalStatus = whaleSupreme.getStatus();
    59 |
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:58:42
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    56 |         const initialStatus = whaleSupreme.getStatus();
    57 |         whaleSupreme.issueCommand('test_command', 'Testing command execution');
  > 58 |         const finalStatus = whaleSupreme.getStatus();
       |                                          ^^^^^^^^^
    59 |
    60 |         expect(finalStatus.powerLevel).toBeLessThan(initialStatus.powerLevel);
    61 |         expect(finalStatus.recentDecisions).toBeGreaterThan(0);
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:76:37
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    74 |         whaleSupreme.resolveConflict('test_conflict', 'test_resolution');
    75 |
  > 76 |         const status = whaleSupreme.getStatus();
       |                                     ^^^^^^^^^
    77 |         expect(status.recentEnvoyActions).toBeGreaterThan(0);
    78 |     });
    79 |
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:94:37
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    92 |         }
    93 |
  > 94 |         const status = whaleSupreme.getStatus();
       |                                     ^^^^^^^^^
    95 |         expect(status.powerContext.historicalAlignment).toBeGreaterThan(0);
    96 |     });
    97 |
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:131:44
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    129 |         }
    130 |
  > 131 |         const initialStatus = whaleSupreme.getStatus();
        |                                            ^^^^^^^^^
    132 |         
    133 |         // Wait for power restoration
    134 |         return new Promise<void>(resolve => {
ERROR in src/tests/integration/WhaleSupreme.integration.test.ts:136:50
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    134 |         return new Promise<void>(resolve => {
    135 |             setTimeout(() => {
  > 136 |                 const finalStatus = whaleSupreme.getStatus();
        |                                                  ^^^^^^^^^
    137 |                 expect(finalStatus.powerLevel).toBeGreaterThan(initialStatus.powerLevel);
    138 |                 resolve();
    139 |             }, 2000); // Wait for 2 seconds
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:12:24
TS2554: Expected 2 arguments, but got 0.
    10 |
    11 |     beforeEach(() => {
  > 12 |         whaleSteward = new WhaleStewardSystem();
       |                        ^^^^^^^^^^^^^^^^^^^^^^^^
    13 |         poseidonSystem = new PoseidonSystem();
    14 |         monitor = new IntegrationMonitor(whaleSteward, poseidonSystem);
    15 |     });
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:13:26
TS2554: Expected 1 arguments, but got 0.
    11 |     beforeEach(() => {
    12 |         whaleSteward = new WhaleStewardSystem();
  > 13 |         poseidonSystem = new PoseidonSystem();
       |                          ^^^^^^^^^^^^^^^^^^^^
    14 |         monitor = new IntegrationMonitor(whaleSteward, poseidonSystem);
    15 |     });
    16 |
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:55:51
TS2352: Conversion of type '{ signalType: string; confidence: number; impact: number; patterns: { type: string; confidence: number; }[]; }' to type 'WhaleAnalysisResult' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type '{ signalType: string; confidence: number; impact: number; patterns: { type: string; confidence: number; }[]; }' is missing the following properties from type 'WhaleAnalysisResult': metadata, timestamp
    53 |     describe('Pattern Analysis', () => {
    54 |         it('should track pattern analysis', async () => {
  > 55 |             const analysis: WhaleAnalysisResult = {
       |                                                   ^
  > 56 |                 signalType: 'song',
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 57 |                 confidence: 0.8,
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 58 |                 impact: 0.6,
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 59 |                 patterns: [
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 60 |                     { type: 'seasonal', confidence: 0.9 },
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 61 |                     { type: 'trend', confidence: 0.7 }
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 62 |                 ]
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 63 |             } as WhaleAnalysisResult;
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    64 |
    65 |             await monitor.trackAnalysis(analysis);
    66 |             const patternReport = monitor.getPatternReport();
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:219:39
TS2551: Property 'monitorSignalProcessing' does not exist on type 'IntegrationMonitor'. Did you mean 'trackSignalProcessing'?
    217 |         };
    218 |
  > 219 |         const metrics = await monitor.monitorSignalProcessing(signal);
        |                                       ^^^^^^^^^^^^^^^^^^^^^^^
    220 |         expect(metrics).toBeDefined();
    221 |         expect(metrics.signalType).toBeDefined();
    222 |         expect(metrics.signalProcessingTime).toBeGreaterThan(0);
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:233:39
TS2551: Property 'monitorSignalProcessing' does not exist on type 'IntegrationMonitor'. Did you mean 'trackSignalProcessing'?
    231 |         };
    232 |
  > 233 |         const metrics = await monitor.monitorSignalProcessing(invalidSignal);
        |                                       ^^^^^^^^^^^^^^^^^^^^^^^
    234 |         expect(metrics.error).toBeDefined();
    235 |         expect(metrics.signalType).toBe('error');
    236 |         expect(metrics.confidence).toBe(0);
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:251:27
TS2551: Property 'monitorSignalProcessing' does not exist on type 'IntegrationMonitor'. Did you mean 'trackSignalProcessing'?
    249 |
    250 |         for (const signal of signals) {
  > 251 |             await monitor.monitorSignalProcessing(signal);
        |                           ^^^^^^^^^^^^^^^^^^^^^^^
    252 |         }
    253 |
    254 |         const performance = monitor.getPerformanceMetrics();
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:254:37
TS2551: Property 'getPerformanceMetrics' does not exist on type 'IntegrationMonitor'. Did you mean 'getErrorMetrics'?
    252 |         }
    253 |
  > 254 |         const performance = monitor.getPerformanceMetrics();
        |                                     ^^^^^^^^^^^^^^^^^^^^^
    255 |         expect(performance.averageProcessingTime).toBeGreaterThan(0);
    256 |         expect(performance.averageUpdateTime).toBeGreaterThan(0);
    257 |         expect(performance.successRate).toBeGreaterThanOrEqual(0);
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:289:27
TS2551: Property 'monitorSignalProcessing' does not exist on type 'IntegrationMonitor'. Did you mean 'trackSignalProcessing'?
    287 |
    288 |         for (const signal of signals) {
  > 289 |             await monitor.monitorSignalProcessing(signal);
        |                           ^^^^^^^^^^^^^^^^^^^^^^^
    290 |         }
    291 |
    292 |         const report = monitor.generateReport();
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:326:27
TS2551: Property 'monitorSignalProcessing' does not exist on type 'IntegrationMonitor'. Did you mean 'trackSignalProcessing'?
    324 |
    325 |         for (const signal of signals) {
  > 326 |             await monitor.monitorSignalProcessing(signal);
        |                           ^^^^^^^^^^^^^^^^^^^^^^^
    327 |         }
    328 |
    329 |         const vocalMetrics = monitor.getMetricsByType('vocal');
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:347:39
TS2551: Property 'monitorSignalProcessing' does not exist on type 'IntegrationMonitor'. Did you mean 'trackSignalProcessing'?
    345 |         };
    346 |
  > 347 |         const metrics = await monitor.monitorSignalProcessing(signal);
        |                                       ^^^^^^^^^^^^^^^^^^^^^^^
    348 |
    349 |         // Test alert conditions
    350 |         expect(monitor.shouldAlertHighProcessingTime(metrics)).toBe(false);
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:368:27
TS2551: Property 'monitorSignalProcessing' does not exist on type 'IntegrationMonitor'. Did you mean 'trackSignalProcessing'?
    366 |
    367 |         for (const signal of signals) {
  > 368 |             await monitor.monitorSignalProcessing(signal);
        |                           ^^^^^^^^^^^^^^^^^^^^^^^
    369 |         }
    370 |
    371 |         const performance = monitor.getPerformanceMetrics();
ERROR in src/tests/monitoring/IntegrationMonitor.test.ts:371:37
TS2551: Property 'getPerformanceMetrics' does not exist on type 'IntegrationMonitor'. Did you mean 'getErrorMetrics'?
    369 |         }
    370 |
  > 371 |         const performance = monitor.getPerformanceMetrics();
        |                                     ^^^^^^^^^^^^^^^^^^^^^
    372 |         expect(performance.adaptationTrend.length).toBeLessThanOrEqual(100);
    373 |         expect(performance.confidenceTrend.length).toBeLessThanOrEqual(100);
    374 |         expect(performance.impactTrend.length).toBeLessThanOrEqual(100);
ERROR in src/tests/RiddlerAcclimatizationStandaloneTest.ts:4:7
TS2741: Property 'peckingTier' is missing in type '{ id: string; type: "human"; name: string; status: "pending"; lastRecognized: null; }' but required in type 'Steward'.
    2 |
    3 | // Test steward (human)
  > 4 | const humanSteward: Steward = { id: 'human2', type: 'human', name: 'Bob', status: 'pending', lastRecognized: null };
      |       ^^^^^^^^^^^^
    5 |
    6 | // Instantiate RiddlerExplorerService
    7 | const riddler = new RiddlerExplorerService();
ERROR in src/tests/RiddlerExplorerServiceStandaloneTest.ts:13:7
TS2741: Property 'peckingTier' is missing in type '{ id: string; type: "human"; name: string; status: "pending"; lastRecognized: null; }' but required in type 'Steward'.
    11 |
    12 | // Test stewards
  > 13 | const humanSteward: Steward = { id: 'human1', type: 'human', name: 'Alice', status: 'pending', lastRecognized: null };
       |       ^^^^^^^^^^^^
    14 | const aiSteward: Steward = { id: 'ai1', type: 'ai', name: 'DjinnAI', status: 'pending', lastRecognized: null };
    15 | const whaleSteward: Steward = { id: 'whale1', type: 'whale', name: 'WhaleSong', status: 'pending', lastRecognized: null };
    16 |
ERROR in src/tests/RiddlerExplorerServiceStandaloneTest.ts:14:7
TS2741: Property 'peckingTier' is missing in type '{ id: string; type: "ai"; name: string; status: "pending"; lastRecognized: null; }' but required in type 'Steward'.
    12 | // Test stewards
    13 | const humanSteward: Steward = { id: 'human1', type: 'human', name: 'Alice', status: 'pending', lastRecognized: null };
  > 14 | const aiSteward: Steward = { id: 'ai1', type: 'ai', name: 'DjinnAI', status: 'pending', lastRecognized: null };
       |       ^^^^^^^^^
    15 | const whaleSteward: Steward = { id: 'whale1', type: 'whale', name: 'WhaleSong', status: 'pending', lastRecognized: null };
    16 |
    17 | // Instantiate RiddlerExplorerService
ERROR in src/tests/RiddlerExplorerServiceStandaloneTest.ts:15:7
TS2741: Property 'peckingTier' is missing in type '{ id: string; type: "whale"; name: string; status: "pending"; lastRecognized: null; }' but required in type 'Steward'.
    13 | const humanSteward: Steward = { id: 'human1', type: 'human', name: 'Alice', status: 'pending', lastRecognized: null };
    14 | const aiSteward: Steward = { id: 'ai1', type: 'ai', name: 'DjinnAI', status: 'pending', lastRecognized: null };
  > 15 | const whaleSteward: Steward = { id: 'whale1', type: 'whale', name: 'WhaleSong', status: 'pending', lastRecognized: null };
       |       ^^^^^^^^^^^^
    16 |
    17 | // Instantiate RiddlerExplorerService
    18 | const riddler = new RiddlerExplorerService();
ERROR in src/tests/setup.ts:4:1
TS1208: 'setup.ts' cannot be compiled under '--isolatedModules' because it is considered a global script file. Add an import, export, or an empty 'export {}' statement to make it a module.
    2 |
    3 | // Increase timeout for tests that involve async operations
  > 4 | jest.setTimeout(10000);
      | ^^^^
    5 |
    6 | // Mock console methods to keep test output clean
    7 | global.console = {
ERROR in src/tests/WhaleSignalFeedbackLoop.test.ts:28:42
TS2345: Argument of type 'TranslatedWhaleSignal' is not assignable to parameter of type 'TranslationResult'.
  Type 'TranslatedWhaleSignal' is missing the following properties from type 'TranslationResult': translatedText, confidence, emotionalTone, context, sentiment
    26 |             };
    27 |
  > 28 |             feedbackLoop.processFeedback(translatedSignal);
       |                                          ^^^^^^^^^^^^^^^^
    29 |             const analysis = feedbackLoop.analyzeSignalImpact();
    30 |             
    31 |             expect(analysis).toBeDefined();
ERROR in src/tests/WhaleSignalFeedbackLoop.test.ts:57:46
TS2345: Argument of type 'TranslatedWhaleSignal' is not assignable to parameter of type 'TranslationResult'.
    55 |             // Add more signals than MAX_HISTORY_LENGTH
    56 |             for (let i = 0; i < 1100; i++) {
  > 57 |                 feedbackLoop.processFeedback(translatedSignal);
       |                                              ^^^^^^^^^^^^^^^^
    58 |             }
    59 |
    60 |             const analysis = feedbackLoop.analyzeSignalImpact();
ERROR in src/tests/WhaleSignalFeedbackLoop.test.ts:84:46
TS2345: Argument of type 'TranslatedWhaleSignal' is not assignable to parameter of type 'TranslationResult'.
    82 |             // Add multiple signals to create a pattern
    83 |             for (let i = 0; i < 10; i++) {
  > 84 |                 feedbackLoop.processFeedback(translatedSignal);
       |                                              ^^^^^^^^^^^^^^^^
    85 |             }
    86 |
    87 |             const analysis = feedbackLoop.analyzeSignalImpact();
ERROR in src/tests/WhaleSignalFeedbackLoop.test.ts:116:46
TS2345: Argument of type '{ content: { frequency: number; signalType: string; duration: number; intensity: number; timestamp: Date; }; type: "environmental" | "vocal" | "movement"; systemInterpretation: string; timestamp: Date; }' is not assignable to parameter of type 'TranslationResult'.
  Type '{ content: { frequency: number; signalType: string; duration: number; intensity: number; timestamp: Date; }; type: "environmental" | "vocal" | "movement"; systemInterpretation: string; timestamp: Date; }' is missing the following properties from type 'TranslationResult': translatedText, confidence, emotionalTone, context, sentiment
    114 |                     }
    115 |                 };
  > 116 |                 feedbackLoop.processFeedback(signal);
        |                                              ^^^^^^
    117 |             }
    118 |
    119 |             const analysis = feedbackLoop.analyzeSignalImpact();
ERROR in src/tests/WhaleSignalFeedbackLoop.test.ts:140:42
TS2345: Argument of type 'TranslatedWhaleSignal' is not assignable to parameter of type 'TranslationResult'.
    138 |             };
    139 |
  > 140 |             feedbackLoop.processFeedback(highImpactSignal);
        |                                          ^^^^^^^^^^^^^^^^
    141 |             const analysis = feedbackLoop.analyzeSignalImpact();
    142 |             
    143 |             expect(analysis.impact).toBeGreaterThan(0.5);
ERROR in src/tests/WhaleSignalFeedbackLoop.test.ts:160:42
TS2345: Argument of type 'TranslatedWhaleSignal' is not assignable to parameter of type 'TranslationResult'.
    158 |             };
    159 |
  > 160 |             feedbackLoop.processFeedback(lowImpactSignal);
        |                                          ^^^^^^^^^^^^^^^
    161 |             const analysis = feedbackLoop.analyzeSignalImpact();
    162 |             
    163 |             expect(analysis.impact).toBeLessThan(0.5);
ERROR in src/tests/WhaleSignalFeedbackLoop.test.ts:184:46
TS2345: Argument of type 'TranslatedWhaleSignal' is not assignable to parameter of type 'TranslationResult'.
    182 |
    183 |             expect(() => {
  > 184 |                 feedbackLoop.processFeedback(invalidSignal);
        |                                              ^^^^^^^^^^^^^
    185 |             }).toThrow();
    186 |         });
    187 |     });
ERROR in src/tests/WhaleSignalProcessing.test.ts:25:19
TS2322: Type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    23 |             // Add synthetic whale signals with known frequencies
    24 |             const signals: WhaleSignal[] = [
  > 25 |                 { signalType: 'vocal', timestamp: new Date(), frequency: 10 },
       |                   ^^^^^^^^^^^^^^^^^^^
    26 |                 { signalType: 'vocal', timestamp: new Date(), frequency: 20 },
    27 |                 { signalType: 'vocal', timestamp: new Date(), frequency: 30 }
    28 |             ];
ERROR in src/tests/WhaleSignalProcessing.test.ts:26:19
TS2322: Type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    24 |             const signals: WhaleSignal[] = [
    25 |                 { signalType: 'vocal', timestamp: new Date(), frequency: 10 },
  > 26 |                 { signalType: 'vocal', timestamp: new Date(), frequency: 20 },
       |                   ^^^^^^^^^^^^^^^^^^^
    27 |                 { signalType: 'vocal', timestamp: new Date(), frequency: 30 }
    28 |             ];
    29 |             signals.forEach(s => processor.addWhaleSignal(s));
ERROR in src/tests/WhaleSignalProcessing.test.ts:27:19
TS2322: Type '{ signalType: string; timestamp: Date; frequency: number; }' is not assignable to type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    25 |                 { signalType: 'vocal', timestamp: new Date(), frequency: 10 },
    26 |                 { signalType: 'vocal', timestamp: new Date(), frequency: 20 },
  > 27 |                 { signalType: 'vocal', timestamp: new Date(), frequency: 30 }
       |                   ^^^^^^^^^^^^^^^^^^^
    28 |             ];
    29 |             signals.forEach(s => processor.addWhaleSignal(s));
    30 |
ERROR in src/tests/WhaleSignalProcessing.test.ts:47:19
TS2322: Type '{ signalType: string; timestamp: Date; behaviorType: string; }' is not assignable to type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    45 |             // Add synthetic whale signals with known behavior types
    46 |             const signals: WhaleSignal[] = [
  > 47 |                 { signalType: 'vocal', timestamp: new Date(), behaviorType: 'feeding' },
       |                   ^^^^^^^^^^^^^^^^^^^
    48 |                 { signalType: 'vocal', timestamp: new Date(), behaviorType: 'feeding' },
    49 |                 { signalType: 'vocal', timestamp: new Date(), behaviorType: 'migration' }
    50 |             ];
ERROR in src/tests/WhaleSignalProcessing.test.ts:48:19
TS2322: Type '{ signalType: string; timestamp: Date; behaviorType: string; }' is not assignable to type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    46 |             const signals: WhaleSignal[] = [
    47 |                 { signalType: 'vocal', timestamp: new Date(), behaviorType: 'feeding' },
  > 48 |                 { signalType: 'vocal', timestamp: new Date(), behaviorType: 'feeding' },
       |                   ^^^^^^^^^^^^^^^^^^^
    49 |                 { signalType: 'vocal', timestamp: new Date(), behaviorType: 'migration' }
    50 |             ];
    51 |             signals.forEach(s => processor.addWhaleSignal(s));
ERROR in src/tests/WhaleSignalProcessing.test.ts:49:19
TS2322: Type '{ signalType: string; timestamp: Date; behaviorType: string; }' is not assignable to type 'WhaleSignal'.
  Object literal may only specify known properties, and 'signalType' does not exist in type 'WhaleSignal'.
    47 |                 { signalType: 'vocal', timestamp: new Date(), behaviorType: 'feeding' },
    48 |                 { signalType: 'vocal', timestamp: new Date(), behaviorType: 'feeding' },
  > 49 |                 { signalType: 'vocal', timestamp: new Date(), behaviorType: 'migration' }
       |                   ^^^^^^^^^^^^^^^^^^^
    50 |             ];
    51 |             signals.forEach(s => processor.addWhaleSignal(s));
    52 |
ERROR in src/tests/WhaleStewardSystem.test.ts:8:18
TS2554: Expected 2 arguments, but got 0.
     6 |
     7 |     beforeEach(() => {
  >  8 |         system = new WhaleStewardSystem();
       |                  ^^^^^^^^^^^^^^^^^^^^^^^^
     9 |     });
    10 |
    11 |     describe('Signal Processing', () => {
ERROR in src/tests/WhaleStewardSystem.test.ts:24:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    22 |             const history = system.getSignalHistory();
    23 |             expect(history.length).toBe(1);
  > 24 |             expect(history[0].type).toBe('vocal');
       |                               ^^^^
    25 |             expect(history[0].content).toEqual(vocalSignal);
    26 |         });
    27 |
ERROR in src/tests/WhaleStewardSystem.test.ts:25:31
TS2551: Property 'content' does not exist on type 'TranslationResult'. Did you mean 'context'?
    23 |             expect(history.length).toBe(1);
    24 |             expect(history[0].type).toBe('vocal');
  > 25 |             expect(history[0].content).toEqual(vocalSignal);
       |                               ^^^^^^^
    26 |         });
    27 |
    28 |         it('should process movement patterns correctly', () => {
ERROR in src/tests/WhaleStewardSystem.test.ts:40:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    38 |             const history = system.getSignalHistory();
    39 |             expect(history.length).toBe(1);
  > 40 |             expect(history[0].type).toBe('movement');
       |                               ^^^^
    41 |             expect(history[0].content).toEqual(movementSignal);
    42 |         });
    43 |
ERROR in src/tests/WhaleStewardSystem.test.ts:41:31
TS2551: Property 'content' does not exist on type 'TranslationResult'. Did you mean 'context'?
    39 |             expect(history.length).toBe(1);
    40 |             expect(history[0].type).toBe('movement');
  > 41 |             expect(history[0].content).toEqual(movementSignal);
       |                               ^^^^^^^
    42 |         });
    43 |
    44 |         it('should process environmental data correctly', () => {
ERROR in src/tests/WhaleStewardSystem.test.ts:55:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    53 |             const history = system.getSignalHistory();
    54 |             expect(history.length).toBe(1);
  > 55 |             expect(history[0].type).toBe('environmental');
       |                               ^^^^
    56 |             expect(history[0].content).toEqual(environmentalSignal);
    57 |         });
    58 |     });
ERROR in src/tests/WhaleStewardSystem.test.ts:56:31
TS2551: Property 'content' does not exist on type 'TranslationResult'. Did you mean 'context'?
    54 |             expect(history.length).toBe(1);
    55 |             expect(history[0].type).toBe('environmental');
  > 56 |             expect(history[0].content).toEqual(environmentalSignal);
       |                               ^^^^^^^
    57 |         });
    58 |     });
    59 |
ERROR in src/tests/WhaleStewardSystem.test.ts:99:41
TS2339: Property 'getRecentSignalsByType' does not exist on type 'WhaleStewardSystem'.
     97 |             system.handleIncomingWhaleSignal(movementSignal);
     98 |
  >  99 |             const vocalHistory = system.getRecentSignalsByType('vocal');
        |                                         ^^^^^^^^^^^^^^^^^^^^^^
    100 |             expect(vocalHistory.length).toBe(1);
    101 |             expect(vocalHistory[0].type).toBe('vocal');
    102 |
ERROR in src/tests/WhaleStewardSystem.test.ts:103:44
TS2339: Property 'getRecentSignalsByType' does not exist on type 'WhaleStewardSystem'.
    101 |             expect(vocalHistory[0].type).toBe('vocal');
    102 |
  > 103 |             const movementHistory = system.getRecentSignalsByType('movement');
        |                                            ^^^^^^^^^^^^^^^^^^^^^^
    104 |             expect(movementHistory.length).toBe(1);
    105 |             expect(movementHistory[0].type).toBe('movement');
    106 |         });
ERROR in src/tests/WhaleStewardSystem.test.ts:124:37
TS2339: Property 'getSignalPatterns' does not exist on type 'WhaleStewardSystem'.
    122 |             }
    123 |
  > 124 |             const patterns = system.getSignalPatterns();
        |                                     ^^^^^^^^^^^^^^^^^
    125 |             expect(patterns.size).toBeGreaterThan(0);
    126 |         });
    127 |
ERROR in src/tests/WhaleStewardSystem.test.ts:138:37
TS2339: Property 'analyzeWhaleData' does not exist on type 'WhaleStewardSystem'.
    136 |
    137 |             system.handleIncomingWhaleSignal(vocalSignal);
  > 138 |             const analysis = system.analyzeWhaleData();
        |                                     ^^^^^^^^^^^^^^^^
    139 |             
    140 |             expect(analysis).toBeDefined();
    141 |             expect(analysis.signalType).toBeDefined();
ERROR in src/tests/WhaleStewardSystem.test.ts:161:31
TS2551: Property 'content' does not exist on type 'TranslationResult'. Did you mean 'context'?
    159 |             system.handleIncomingWhaleSignal(highImpactSignal);
    160 |             const history = system.getSignalHistory();
  > 161 |             expect(history[0].content).toEqual(highImpactSignal);
        |                               ^^^^^^^
    162 |         });
    163 |     });
    164 |
ERROR in src/tests/WhaleStewardSystem.test.ts:177:31
TS2551: Property 'content' does not exist on type 'TranslationResult'. Did you mean 'context'?
    175 |             system.handleIncomingWhaleSignal(lowConfidenceSignal);
    176 |             const history = system.getSignalHistory();
  > 177 |             expect(history[0].content).toEqual(lowConfidenceSignal);
        |                               ^^^^^^^
    178 |         });
    179 |     });
    180 | }); 
ERROR in src/tests/WhaleSupreme.test.ts:37:22
TS2339: Property 'dispose' does not exist on type 'WhaleSupreme'.
    35 |
    36 |     afterEach(() => {
  > 37 |         whaleSupreme.dispose();
       |                      ^^^^^^^
    38 |     });
    39 |
    40 |     describe('Decision Logging', () => {
ERROR in src/tests/WhaleSupreme.test.ts:47:41
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    45 |             whaleSupreme.issueCommand(decisionType, context);
    46 |             
  > 47 |             const status = whaleSupreme.getStatus();
       |                                         ^^^^^^^^^
    48 |             expect(status.recentDecisions).toBeGreaterThan(0);
    49 |             expect(status.ethicalAlignment).toBeDefined();
    50 |             expect(status.ecologicalBalance).toBeDefined();
ERROR in src/tests/WhaleSupreme.test.ts:64:44
TS2339: Property 'getRecentDecisions' does not exist on type 'WhaleSupreme'.
    62 |             whaleSupreme.issueCommand('test_command', 'Testing environmental context');
    63 |             
  > 64 |             const decisions = whaleSupreme.getRecentDecisions(1);
       |                                            ^^^^^^^^^^^^^^^^^^
    65 |             expect(decisions[0].environmentalContext).toBeDefined();
    66 |             expect(decisions[0].environmentalContext.temperature).toBe(15);
    67 |             expect(decisions[0].environmentalContext.salinity).toBe(32.5);
ERROR in src/tests/WhaleSupreme.test.ts:80:26
TS2339: Property 'respondToEnvironmentalChange' does not exist on type 'WhaleSupreme'.
    78 |             };
    79 |
  > 80 |             whaleSupreme.respondToEnvironmentalChange(envSignal);
       |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    81 |             
    82 |             const status = whaleSupreme.getStatus();
    83 |             expect(status.powerContext.environmentalStability).toBeDefined();
ERROR in src/tests/WhaleSupreme.test.ts:82:41
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    80 |             whaleSupreme.respondToEnvironmentalChange(envSignal);
    81 |             
  > 82 |             const status = whaleSupreme.getStatus();
       |                                         ^^^^^^^^^
    83 |             expect(status.powerContext.environmentalStability).toBeDefined();
    84 |         });
    85 |
ERROR in src/tests/WhaleSupreme.test.ts:103:47
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    101 |             // Test with stable environment
    102 |             poseidon.provideEnvironmentalData(stableEnv);
  > 103 |             const stableStatus = whaleSupreme.getStatus();
        |                                               ^^^^^^^^^
    104 |             expect(stableStatus.powerContext.environmentalStability).toBeGreaterThan(0.8);
    105 |
    106 |             // Test with unstable environment
ERROR in src/tests/WhaleSupreme.test.ts:108:49
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    106 |             // Test with unstable environment
    107 |             poseidon.provideEnvironmentalData(unstableEnv);
  > 108 |             const unstableStatus = whaleSupreme.getStatus();
        |                                                 ^^^^^^^^^
    109 |             expect(unstableStatus.powerContext.environmentalStability).toBeLessThan(0.8);
    110 |         });
    111 |     });
ERROR in src/tests/WhaleSupreme.test.ts:120:41
TS2339: Property 'getRecentAlerts' does not exist on type 'WhaleSupreme'.
    118 |             }
    119 |
  > 120 |             const alerts = whaleSupreme.getRecentAlerts();
        |                                         ^^^^^^^^^^^^^^^
    121 |             const powerAlerts = alerts.filter(alert => alert.alertType === 'power');
    122 |             expect(powerAlerts.length).toBeGreaterThan(0);
    123 |             expect(powerAlerts[0].severity).toBe('high');
ERROR in src/tests/WhaleSupreme.test.ts:121:47
TS7006: Parameter 'alert' implicitly has an 'any' type.
    119 |
    120 |             const alerts = whaleSupreme.getRecentAlerts();
  > 121 |             const powerAlerts = alerts.filter(alert => alert.alertType === 'power');
        |                                               ^^^^^
    122 |             expect(powerAlerts.length).toBeGreaterThan(0);
    123 |             expect(powerAlerts[0].severity).toBe('high');
    124 |         });
ERROR in src/tests/WhaleSupreme.test.ts:137:41
TS2339: Property 'getRecentAlerts' does not exist on type 'WhaleSupreme'.
    135 |             whaleSupreme.issueCommand('test_command', 'Testing ethical alignment');
    136 |             
  > 137 |             const alerts = whaleSupreme.getRecentAlerts();
        |                                         ^^^^^^^^^^^^^^^
    138 |             const ethicalAlerts = alerts.filter(alert => alert.alertType === 'ethical');
    139 |             expect(ethicalAlerts.length).toBeGreaterThan(0);
    140 |         });
ERROR in src/tests/WhaleSupreme.test.ts:138:49
TS7006: Parameter 'alert' implicitly has an 'any' type.
    136 |             
    137 |             const alerts = whaleSupreme.getRecentAlerts();
  > 138 |             const ethicalAlerts = alerts.filter(alert => alert.alertType === 'ethical');
        |                                                 ^^^^^
    139 |             expect(ethicalAlerts.length).toBeGreaterThan(0);
    140 |         });
    141 |
ERROR in src/tests/WhaleSupreme.test.ts:153:41
TS2339: Property 'getRecentAlerts' does not exist on type 'WhaleSupreme'.
    151 |             whaleSupreme.issueCommand('test_command', 'Testing ecological balance');
    152 |             
  > 153 |             const alerts = whaleSupreme.getRecentAlerts();
        |                                         ^^^^^^^^^^^^^^^
    154 |             const ecologicalAlerts = alerts.filter(alert => alert.alertType === 'ecological');
    155 |             expect(ecologicalAlerts.length).toBeGreaterThan(0);
    156 |         });
ERROR in src/tests/WhaleSupreme.test.ts:154:52
TS7006: Parameter 'alert' implicitly has an 'any' type.
    152 |             
    153 |             const alerts = whaleSupreme.getRecentAlerts();
  > 154 |             const ecologicalAlerts = alerts.filter(alert => alert.alertType === 'ecological');
        |                                                    ^^^^^
    155 |             expect(ecologicalAlerts.length).toBeGreaterThan(0);
    156 |         });
    157 |     });
ERROR in src/tests/WhaleSupreme.test.ts:174:48
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    172 |             }
    173 |
  > 174 |             const initialStatus = whaleSupreme.getStatus();
        |                                                ^^^^^^^^^
    175 |             
    176 |             // Wait for power restoration
    177 |             return new Promise<void>(resolve => {
ERROR in src/tests/WhaleSupreme.test.ts:179:54
TS2339: Property 'getStatus' does not exist on type 'WhaleSupreme'.
    177 |             return new Promise<void>(resolve => {
    178 |                 setTimeout(() => {
  > 179 |                     const finalStatus = whaleSupreme.getStatus();
        |                                                      ^^^^^^^^^
    180 |                     expect(finalStatus.powerLevel).toBeGreaterThan(initialStatus.powerLevel);
    181 |                     resolve();
    182 |                 }, 2000); // Wait for 2 seconds
ERROR in src/tests/WhaleTranslationTool.test.ts:22:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    20 |
    21 |             const translated = translator.translateWhaleSignal(vocalSignal);
  > 22 |             expect(translated.type).toBe('vocal');
       |                               ^^^^
    23 |             expect(translated.content).toEqual(vocalSignal);
    24 |             expect(translated.systemInterpretation).toContain('Vocal signal detected');
    25 |         });
ERROR in src/tests/WhaleTranslationTool.test.ts:23:31
TS2551: Property 'content' does not exist on type 'TranslationResult'. Did you mean 'context'?
    21 |             const translated = translator.translateWhaleSignal(vocalSignal);
    22 |             expect(translated.type).toBe('vocal');
  > 23 |             expect(translated.content).toEqual(vocalSignal);
       |                               ^^^^^^^
    24 |             expect(translated.systemInterpretation).toContain('Vocal signal detected');
    25 |         });
    26 |
ERROR in src/tests/WhaleTranslationTool.test.ts:24:31
TS2339: Property 'systemInterpretation' does not exist on type 'TranslationResult'.
    22 |             expect(translated.type).toBe('vocal');
    23 |             expect(translated.content).toEqual(vocalSignal);
  > 24 |             expect(translated.systemInterpretation).toContain('Vocal signal detected');
       |                               ^^^^^^^^^^^^^^^^^^^^
    25 |         });
    26 |
    27 |         it('should translate movement patterns correctly', () => {
ERROR in src/tests/WhaleTranslationTool.test.ts:37:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    35 |
    36 |             const translated = translator.translateWhaleSignal(movementSignal);
  > 37 |             expect(translated.type).toBe('movement');
       |                               ^^^^
    38 |             expect(translated.content).toEqual(movementSignal);
    39 |             expect(translated.systemInterpretation).toContain('Movement pattern');
    40 |         });
ERROR in src/tests/WhaleTranslationTool.test.ts:38:31
TS2551: Property 'content' does not exist on type 'TranslationResult'. Did you mean 'context'?
    36 |             const translated = translator.translateWhaleSignal(movementSignal);
    37 |             expect(translated.type).toBe('movement');
  > 38 |             expect(translated.content).toEqual(movementSignal);
       |                               ^^^^^^^
    39 |             expect(translated.systemInterpretation).toContain('Movement pattern');
    40 |         });
    41 |
ERROR in src/tests/WhaleTranslationTool.test.ts:39:31
TS2339: Property 'systemInterpretation' does not exist on type 'TranslationResult'.
    37 |             expect(translated.type).toBe('movement');
    38 |             expect(translated.content).toEqual(movementSignal);
  > 39 |             expect(translated.systemInterpretation).toContain('Movement pattern');
       |                               ^^^^^^^^^^^^^^^^^^^^
    40 |         });
    41 |
    42 |         it('should translate environmental data correctly', () => {
ERROR in src/tests/WhaleTranslationTool.test.ts:51:31
TS2339: Property 'type' does not exist on type 'TranslationResult'.
    49 |
    50 |             const translated = translator.translateWhaleSignal(environmentalSignal);
  > 51 |             expect(translated.type).toBe('environmental');
       |                               ^^^^
    52 |             expect(translated.content).toEqual(environmentalSignal);
    53 |             expect(translated.systemInterpretation).toContain('Environmental conditions');
    54 |         });
ERROR in src/tests/WhaleTranslationTool.test.ts:52:31
TS2551: Property 'content' does not exist on type 'TranslationResult'. Did you mean 'context'?
    50 |             const translated = translator.translateWhaleSignal(environmentalSignal);
    51 |             expect(translated.type).toBe('environmental');
  > 52 |             expect(translated.content).toEqual(environmentalSignal);
       |                               ^^^^^^^
    53 |             expect(translated.systemInterpretation).toContain('Environmental conditions');
    54 |         });
    55 |     });
ERROR in src/tests/WhaleTranslationTool.test.ts:53:31
TS2339: Property 'systemInterpretation' does not exist on type 'TranslationResult'.
    51 |             expect(translated.type).toBe('environmental');
    52 |             expect(translated.content).toEqual(environmentalSignal);
  > 53 |             expect(translated.systemInterpretation).toContain('Environmental conditions');
       |                               ^^^^^^^^^^^^^^^^^^^^
    54 |         });
    55 |     });
    56 |
ERROR in src/tests/WhaleTranslationTool.test.ts:68:55
TS2345: Argument of type 'TranslationResult' is not assignable to parameter of type 'TranslatedWhaleSignal'.
  Type 'TranslationResult' is missing the following properties from type 'TranslatedWhaleSignal': type, content, systemInterpretation
    66 |
    67 |             const translated = translator.translateWhaleSignal(vocalSignal);
  > 68 |             const analysis = translator.analyzeSignal(translated);
       |                                                       ^^^^^^^^^^
    69 |
    70 |             expect(analysis.signalType).toBe('vocal');
    71 |             expect(analysis.confidence).toBeGreaterThanOrEqual(0);
ERROR in src/tests/WhaleTranslationTool.test.ts:88:55
TS2345: Argument of type 'TranslationResult' is not assignable to parameter of type 'TranslatedWhaleSignal'.
    86 |
    87 |             const translated = translator.translateWhaleSignal(highFreqSignal);
  > 88 |             const analysis = translator.analyzeSignal(translated);
       |                                                       ^^^^^^^^^^
    89 |
    90 |             expect(analysis.signalType).toBe('vocal');
    91 |             expect(analysis.impact).toBeGreaterThan(0.5); // High frequency should have higher impact
ERROR in src/tests/WhaleTranslationTool.test.ts:104:55
TS2345: Argument of type 'TranslationResult' is not assignable to parameter of type 'TranslatedWhaleSignal'.
    102 |
    103 |             const translated = translator.translateWhaleSignal(lowIntensitySignal);
  > 104 |             const analysis = translator.analyzeSignal(translated);
        |                                                       ^^^^^^^^^^
    105 |
    106 |             expect(analysis.signalType).toBe('vocal');
    107 |             expect(analysis.confidence).toBeLessThan(0.5); // Low intensity should have lower confidence
ERROR in src/tests/WhaleTranslationTool.test.ts:122:55
TS2345: Argument of type 'TranslationResult' is not assignable to parameter of type 'TranslatedWhaleSignal'.
    120 |
    121 |             const translated = translator.translateWhaleSignal(vocalSignal);
  > 122 |             const analysis = translator.analyzeSignal(translated);
        |                                                       ^^^^^^^^^^
    123 |
    124 |             expect(analysis.metadata.pattern).toBeDefined();
    125 |         });
ERROR in src/tests/WhaleTranslationTool.test.ts:137:55
TS2345: Argument of type 'TranslationResult' is not assignable to parameter of type 'TranslatedWhaleSignal'.
    135 |
    136 |             const translated = translator.translateWhaleSignal(movementSignal);
  > 137 |             const analysis = translator.analyzeSignal(translated);
        |                                                       ^^^^^^^^^^
    138 |
    139 |             expect(analysis.metadata.pattern).toBeDefined();
    140 |         });
ERROR in src/utils/environment.ts:1:8
TS2613: Module '"P:/Jeff Stuff/temporal_edition/src/config"' has no default export. Did you mean to use 'import { config } from "P:/Jeff Stuff/temporal_edition/src/config"' instead?
  > 1 | import config from '../config';
      |        ^^^^^^
    2 |
    3 | export const isDevelopment = () => config.environment === 'development';
    4 | export const isProduction = () => config.environment === 'production';
ERROR in src/utils/redis.ts:1:19
TS2307: Cannot find module 'ioredis' or its corresponding type declarations.
  > 1 | import Redis from 'ioredis';
      |                   ^^^^^^^^^
    2 | import { logger } from './logger';
    3 |
    4 | export class RedisClient {
ERROR in src/utils/redis.ts:18:30
TS7006: Parameter 'error' implicitly has an 'any' type.
    16 |     });
    17 |
  > 18 |     this.client.on('error', (error) => {
       |                              ^^^^^
    19 |       logger.error('Redis client error:', error);
    20 |     });
    21 |
ERROR in src/utils/security.ts:35:40
TS2802: Type 'Uint8Array' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
    33 |     result.set(encryptedArray, iv.length);
    34 |
  > 35 |     return btoa(String.fromCharCode(...result));
       |                                        ^^^^^^
    36 |   } catch (err) {
    37 |     error('Encryption failed:', err);
    38 |     throw new Error('Failed to encrypt data');