import { PoseidonSystem } from './PoseidonSystem';
import { WhaleSignalProcessing } from './WhaleSignalProcessing';
import { EnvironmentalDataIntegrator } from './EnvironmentalDataIntegrator';
import { SonarEnhancementSystem } from './SonarEnhancementSystem';
import { WhaleSleepSystem } from './WhaleSleepSystem';
import { WhaleCommandSystem } from './WhaleCommandSystem';
export declare class WhaleSupreme {
    private poseidon;
    private processor;
    private sonarSystem;
    private sleepSystem;
    private commandSystem;
    private environmentalIntegrator;
    private decisions;
    private envoyActions;
    private isActive;
    private powerLevel;
    private readonly MAX_POWER_LEVEL;
    private readonly MIN_POWER_LEVEL;
    private readonly BASE_POWER_DECREASE_RATE;
    private readonly POWER_RESTORATION_RATE;
    private readonly POWER_CHECK_INTERVAL;
    private powerCheckInterval;
    private monitoring;
    constructor(environmentalIntegrator: EnvironmentalDataIntegrator, processor: WhaleSignalProcessing, poseidon: PoseidonSystem, commandSystem: WhaleCommandSystem, sonarSystem: SonarEnhancementSystem, sleepSystem: WhaleSleepSystem);
    private initializePowerManagement;
    private updatePowerLevel;
    private assessPowerContext;
    private calculatePowerLevel;
    private calculateEnvironmentalStability;
    private calculateHistoricalAlignment;
    private calculateWhaleAutonomy;
    private calculateSystemHealth;
    issueCommand(command: string, reasoning: string): void;
    overrideSystem(system: string, reason: string): void;
    provideGuidance(guidance: string, context: string): void;
    actAsEnvoy(action: string, context: string): void;
    resolveConflict(conflict: string, resolution: string): void;
    private hasSufficientPower;
    private decreasePower;
    restorePower(amount: number): void;
    private validateDecision;
    private validateEnvoyAction;
    private assessEthicalAlignment;
    private assessEcologicalBalance;
    private calculateEnvironmentalImpact;
    private calculateWhaleImpact;
    private calculateSystemImpact;
    private executeCommand;
    private executeOverride;
    private executeEnvoyAction;
    private executeConflictResolution;
    private processGuidance;
}
